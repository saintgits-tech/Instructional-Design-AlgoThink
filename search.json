[
  {
    "objectID": "setup/index.html",
    "href": "setup/index.html",
    "title": "Setting Up of Quarto",
    "section": "",
    "text": "Before diving into literate programming with Quarto, ensure that your development environment is properly set up. Follow these steps to install and configure the necessary tools:",
    "crumbs": [
      "Home",
      "Setting-up"
    ]
  },
  {
    "objectID": "setup/index.html#introduction",
    "href": "setup/index.html#introduction",
    "title": "Setting Up of Quarto",
    "section": "",
    "text": "Before diving into literate programming with Quarto, ensure that your development environment is properly set up. Follow these steps to install and configure the necessary tools:",
    "crumbs": [
      "Home",
      "Setting-up"
    ]
  },
  {
    "objectID": "setup/index.html#step-1-install-python",
    "href": "setup/index.html#step-1-install-python",
    "title": "Setting Up of Quarto",
    "section": "Step 1: Install Python",
    "text": "Step 1: Install Python\nPython is essential for this workshop as it is integral to Quarto for executing code within documents, accessing a wide range of libraries and tools for data analysis and machine learning, and enabling script execution. It also integrates seamlessly with Visual Studio Code, our recommended IDE, to enhance coding efficiency and support advanced machine learning tasks. By installing Python, you set up a powerful environment that supports both technical documentation and complex computational projects.\n\nDownload and Install Python\n\nGo to the official Python website.\nDownload the latest stable version of Python suitable for your operating system (Windows, macOS, or Linux).\nRun the installer and ensure you check the box to “Add Python to PATH” during installation.\nFollow the on-screen instructions to complete the installation.",
    "crumbs": [
      "Home",
      "Setting-up"
    ]
  },
  {
    "objectID": "setup/index.html#step-2-install-visual-studio-code-vs-code",
    "href": "setup/index.html#step-2-install-visual-studio-code-vs-code",
    "title": "Setting Up of Quarto",
    "section": "Step 2: Install Visual Studio Code (VS Code)",
    "text": "Step 2: Install Visual Studio Code (VS Code)\n\nDownload and Install Visual Studio Code (VS Code)\n\nVisit the official VS Code website.\nDownload the installer for your operating system.\nRun the installer and follow the prompts to install VS Code.\nAfter installation, open VS Code and install the recommended extensions:\n\nPython Extension: Search for “Python” in the Extensions view (Ctrl+Shift+X) and install it.\nQuarto Extension: Search for “Quarto” in the Extensions view and install it.",
    "crumbs": [
      "Home",
      "Setting-up"
    ]
  },
  {
    "objectID": "setup/index.html#step-3-install-quarto-cli",
    "href": "setup/index.html#step-3-install-quarto-cli",
    "title": "Setting Up of Quarto",
    "section": "Step 3: Install Quarto CLI",
    "text": "Step 3: Install Quarto CLI\nQuarto CLI is crucial as it allows you to create, render, and manage Quarto documents and projects. Quarto CLI integrates seamlessly with your development environment, enabling you to compile literate programming documents that combine code and narrative effectively. It supports various output formats, including HTML, PDF, and slides, and facilitates the integration of code with documentation. By installing Quarto CLI, you equip yourself with the necessary tools to manage and execute Quarto projects efficiently, making it a key component of your setup for this workshop.\n\nDownload and Install Quarto CLI\n\nVisit the Quarto CLI download page.\nDownload the latest stable release of Quarto CLI for your operating system.\nRun the installer and follow the on-screen instructions to complete the installation.\nAfter installation, verify that Quarto CLI is correctly installed by opening a command line interface (Terminal on macOS/Linux, Command Prompt or PowerShell on Windows) and typing:\nquarto --version",
    "crumbs": [
      "Home",
      "Setting-up"
    ]
  },
  {
    "objectID": "setup/index.html#step-4-install-git-for-cicd",
    "href": "setup/index.html#step-4-install-git-for-cicd",
    "title": "Setting Up of Quarto",
    "section": "Step 4: Install Git for CI/CD",
    "text": "Step 4: Install Git for CI/CD\nGit is essential for version control and collaborative development, enabling you to track changes in your code, manage different versions of your projects, and collaborate effectively with others. It supports continuous integration and deployment (CI/CD) workflows, which are crucial for maintaining and deploying code systematically. Additionally, Git integrates with GitHub, allowing you to host and publish websites using GitHub Pages, providing a seamless way to share and showcase your projects online. By installing Git, you ensure that you can manage and synchronize your work efficiently, maintain a history of changes, collaborate seamlessly, and leverage GitHub Pages for web hosting throughout the workshop.\n\nDownload and Install Git\n\nVisit the official Git website.\nDownload the installer for your operating system.\nRun the installer and follow the prompts. You can use the default settings for most options.\nEnsure Git is added to your system PATH by checking the appropriate option during installation.\n\nConfigure Git\n\nOpen your command line interface (Terminal on macOS/Linux, Command Prompt or PowerShell on Windows).\nConfigure your Git username and email:\ngit config --global user.name \"Your Name\"\ngit config --global user.email \"your.email@example.com\"\nVerify the installation by checking the Git version:\ngit --version\n\n\n\n\n\n\n\n\nNote\n\n\n\nIf you are in a fresh Python 3 environment, installing the jupyter package will provide everything required to execute Jupyter kernels with Quarto:\npython3 -m pip install jupyter\n\n\nThe publishing workflow is the process in which external resources are prepared and collated together with the help of an authoring tool and subsequently rendered with a formatting tool to generate a publishable output that can be delivered in various forms. This is visualised by the following figure.",
    "crumbs": [
      "Home",
      "Setting-up"
    ]
  },
  {
    "objectID": "setup/index.html#literate-programming-workflow",
    "href": "setup/index.html#literate-programming-workflow",
    "title": "Setting Up of Quarto",
    "section": "Literate Programming Workflow",
    "text": "Literate Programming Workflow\n\n\n\n\n\n---\n Literate Programming Workflow\n---\ngraph TD\n    A[Python] --&gt;|Code Execution| B[Quarto CLI]\n    B --&gt;|Document Rendering| C[Technical Documents]\n    B --&gt;|Document Rendering| D[Blogs]\n    B --&gt;|Document Rendering| E[Websites]\n    E --&gt;|Host| F[GitHub Pages]\n    G[Git] --&gt;|Version Control| C\n    G --&gt;|Version Control| D\n    G --&gt;|Version Control| E\n    G --&gt;|CI/CD| F\n\n    subgraph Development\n        A\n        B\n        G\n    end\n\n    subgraph Output\n        C\n        D\n        E\n        F\n    end\n\n    style Development fill:#f9f,stroke:#333,stroke-width:2px\n    style Output fill:#ccf,stroke:#333,stroke-width:2px",
    "crumbs": [
      "Home",
      "Setting-up"
    ]
  },
  {
    "objectID": "setup/index.html#creating-your-personal-website",
    "href": "setup/index.html#creating-your-personal-website",
    "title": "Setting Up of Quarto",
    "section": "Creating Your Personal Website",
    "text": "Creating Your Personal Website\nIn the digital era, a personal website is an essential tool for engineering students looking to showcase their skills, projects, and achievements. It acts as an online portfolio, a platform for sharing insights, and a way to make a professional impression. Creating your own website involves several key steps, from planning and design to development and hosting. This guide will walk you through the process of designing a user-friendly site, building it with the right tools, testing and optimizing its performance, and finally, hosting it for the world to see. Whether you want to present your academic projects, share your resume, or maintain a blog, a well-crafted personal website can enhance your visibility and open up new opportunities in your engineering career.",
    "crumbs": [
      "Home",
      "Setting-up"
    ]
  },
  {
    "objectID": "setup/index.html#step-1-clone-the-website-template-respository-from-github",
    "href": "setup/index.html#step-1-clone-the-website-template-respository-from-github",
    "title": "Setting Up of Quarto",
    "section": "Step 1: Clone the Website template respository from Github",
    "text": "Step 1: Clone the Website template respository from Github\nCopy the following Github repo url and clone using Vscode source control.\nhttps://github.com/sijuswamy/Website-Template",
    "crumbs": [
      "Home",
      "Setting-up"
    ]
  },
  {
    "objectID": "setup/index.html#step-2-open-the-folder-in-the-vscode-and-change-and-update-the-necessary-details-and-content.",
    "href": "setup/index.html#step-2-open-the-folder-in-the-vscode-and-change-and-update-the-necessary-details-and-content.",
    "title": "Setting Up of Quarto",
    "section": "Step 2: Open the folder in the VScode and change and update the necessary details and content.",
    "text": "Step 2: Open the folder in the VScode and change and update the necessary details and content.\nYou can author Quarto documents that include Python code using any text or notebook editor. No matter what editing tool you use, you’ll always run quarto preview first to setup a live preview of changes in your document. Live preview is available for both HTML and PDF output. For example:\nUse any of the following options to create your personal website designed in Quarto.\n# preview as html\nquarto preview index.qmd\n\n# preview as pdf\nquarto preview index.qmd --to pdf\n\n# preview a jupyter notebook\nquarto preview index.ipynb\n\nRendering\nYou can use quarto render command line options to control caching behavior without changing the document’s code. Use options to force the use of caching on all chunks, disable the use of caching on all chunks (even if it’s specified in options), or to force a refresh of the cache even if it has not been invalidated:\n# use a cache (even if not enabled in options)\nquarto render example.qmd --cache \n\n# don't use a cache (even if enabled in options)\nquarto render example.qmd --no-cache \n\n# use a cache and force a refresh \nquarto render example.qmd --cache-refresh",
    "crumbs": [
      "Home",
      "Setting-up"
    ]
  },
  {
    "objectID": "setup/slides-quarto.html#step-1-install-python",
    "href": "setup/slides-quarto.html#step-1-install-python",
    "title": "Setting Up of Quarto",
    "section": "Step 1: Install Python",
    "text": "Step 1: Install Python\n\nDownload and Install Python\n\nGo to the official Python website.\nDownload the latest stable version of Python suitable for your operating system (Windows, macOS, or Linux).\nRun the installer and ensure you check the box to “Add Python to PATH” during installation.\nFollow the on-screen instructions to complete the installation."
  },
  {
    "objectID": "setup/slides-quarto.html#step-2-install-visual-studio-code-vs-code",
    "href": "setup/slides-quarto.html#step-2-install-visual-studio-code-vs-code",
    "title": "Setting Up of Quarto",
    "section": "Step 2: Install Visual Studio Code (VS Code)",
    "text": "Step 2: Install Visual Studio Code (VS Code)\n\nDownload and Install Visual Studio Code (VS Code)\n\nVisit the official VS Code website.\nDownload the installer for your operating system.\nRun the installer and follow the prompts to install VS Code.\nAfter installation, open VS Code and install the recommended extensions:\n\nPython Extension: Search for “Python” in the Extensions view (Ctrl+Shift+X) and install it.\nQuarto Extension: Search for “Quarto” in the Extensions view and install it."
  },
  {
    "objectID": "setup/slides-quarto.html#step-3-install-quarto-cli",
    "href": "setup/slides-quarto.html#step-3-install-quarto-cli",
    "title": "Setting Up of Quarto",
    "section": "Step 3: Install Quarto CLI",
    "text": "Step 3: Install Quarto CLI\n\nDownload and Install Quarto CLI\n\nVisit the Quarto CLI download page.\nDownload the latest stable release of Quarto CLI for your operating system.\nRun the installer and follow the on-screen instructions to complete the installation.\nAfter installation, verify that Quarto CLI is correctly installed by opening a command line interface (Terminal on macOS/Linux, Command Prompt or PowerShell on Windows) and typing:\nquarto --version"
  },
  {
    "objectID": "setup/slides-quarto.html#step-4-install-git-for-cicd",
    "href": "setup/slides-quarto.html#step-4-install-git-for-cicd",
    "title": "Setting Up of Quarto",
    "section": "Step 4: Install Git for CI/CD",
    "text": "Step 4: Install Git for CI/CD\n\nDownload and Install Git\n\nVisit the official Git website.\nDownload the installer for your operating system.\nRun the installer and follow the prompts. You can use the default settings for most options.\nEnsure Git is added to your system PATH by checking the appropriate option during installation.\n\nConfigure Git\n\nOpen your command line interface (Terminal on macOS/Linux, Command Prompt or PowerShell on Windows).\nConfigure your Git username and email:\ngit config --global user.name \"Your Name\"\ngit config --global user.email \"your.email@example.com\"\nVerify the installation by checking the Git version:\ngit --version"
  },
  {
    "objectID": "setup/slides-quarto.html#literate-programming-workflow",
    "href": "setup/slides-quarto.html#literate-programming-workflow",
    "title": "Setting Up of Quarto",
    "section": "Literate Programming Workflow",
    "text": "Literate Programming Workflow\n\n\n\n\n\n---\n Literate Programming Workflow\n---\ngraph TD\n    A[Python] --&gt;|Code Execution| B[Quarto CLI]\n    B --&gt;|Document Rendering| C[Technical Documents]\n    B --&gt;|Document Rendering| D[Blogs]\n    B --&gt;|Document Rendering| E[Websites]\n    E --&gt;|Host| F[GitHub Pages]\n    G[Git] --&gt;|Version Control| C\n    G --&gt;|Version Control| D\n    G --&gt;|Version Control| E\n    G --&gt;|CI/CD| F\n\n    subgraph Development\n        A\n        B\n        G\n    end\n\n    subgraph Output\n        C\n        D\n        E\n        F\n    end\n\n    style Development fill:#f9f,stroke:#333,stroke-width:2px\n    style Output fill:#ccf,stroke:#333,stroke-width:2px"
  },
  {
    "objectID": "setup/slides-quarto.html#creating-your-personal-website",
    "href": "setup/slides-quarto.html#creating-your-personal-website",
    "title": "Setting Up of Quarto",
    "section": "Creating Your Personal Website",
    "text": "Creating Your Personal Website"
  },
  {
    "objectID": "setup/slides-quarto.html#step-1-clone-the-website-template-respository-from-github",
    "href": "setup/slides-quarto.html#step-1-clone-the-website-template-respository-from-github",
    "title": "Setting Up of Quarto",
    "section": "Step 1: Clone the Website template respository from Github",
    "text": "Step 1: Clone the Website template respository from Github\nCopy the following Github repo url and clone using Vscode source control.\nhttps://github.com/sijuswamy/Website-Template"
  },
  {
    "objectID": "setup/slides-quarto.html#step-2-open-the-folder-in-the-vscode-and-change-and-update-the-necessary-details-and-content.",
    "href": "setup/slides-quarto.html#step-2-open-the-folder-in-the-vscode-and-change-and-update-the-necessary-details-and-content.",
    "title": "Setting Up of Quarto",
    "section": "Step 2: Open the folder in the VScode and change and update the necessary details and content.",
    "text": "Step 2: Open the folder in the VScode and change and update the necessary details and content.\nUse any of the following options to create your personal website designed in Quarto.\n# preview as html\nquarto preview index.qmd\n\n# preview as pdf\nquarto preview index.qmd --to pdf\n\n# preview a jupyter notebook\nquarto preview index.ipynb\nRendering\nYou can use quarto render command line options to control caching behavior without changing the document’s code. Use options to force the use of caching on all chunks, disable the use of caching on all chunks (even if it’s specified in options), or to force a refresh of the cache even if it has not been invalidated:\n# use a cache (even if not enabled in options)\nquarto render example.qmd --cache \n\n# don't use a cache (even if enabled in options)\nquarto render example.qmd --no-cache \n\n# use a cache and force a refresh \nquarto render example.qmd --cache-refresh"
  },
  {
    "objectID": "Instructional_design/python_programs.html",
    "href": "Instructional_design/python_programs.html",
    "title": "Programming Tutorial",
    "section": "",
    "text": "1. Python Program to calculate the square root\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n2. Find square root of real or complex numbers\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n3. Python Program to find the area of triangle\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n4. Solve the quadratic equation \\(ax^2 + bx + c = 0\\)\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n5. Python program to swap two variables\n\nPlease enable JavaScript to experience the dynamic code cell content on this page."
  },
  {
    "objectID": "Instructional_design/Course_outline.html",
    "href": "Instructional_design/Course_outline.html",
    "title": "Python Programming",
    "section": "",
    "text": "Credits: 2\nHours per Week: 2\nCourse Objectives:\n\nTo develop algorithmic thinking and problem-solving skills.\nTo familiarize students with computer systems, software, and language translators.\nTo justify the use of Python for programming and algorithmic design.\nTo introduce Python programming concepts, including data types, conditional statements, and loops.\nTo implement functions, string operations, and real-time applications using Python’s data structures.\nTo enable students to apply their knowledge to solve practical problems through a micro project."
  },
  {
    "objectID": "Instructional_design/Course_outline.html#topic-1-introduction-to-algorithmic-thinking",
    "href": "Instructional_design/Course_outline.html#topic-1-introduction-to-algorithmic-thinking",
    "title": "Python Programming",
    "section": "Topic 1: Introduction to Algorithmic Thinking",
    "text": "Topic 1: Introduction to Algorithmic Thinking\nLesson Outcomes:\n\nUnderstand the concept of algorithmic thinking.\nDevelop basic algorithms for simple problems.\nRecognize the importance of algorithms in problem-solving.\n\nContent:\n\nWhat is Algorithmic Thinking?\n\nImportance in problem-solving\nSteps in designing an algorithm\n\nExample Algorithms:\n\nSimple tasks (e.g., making a cup of tea)\n\n\nPractical Situation:\n\nCreate algorithms for everyday activities to illustrate the concept."
  },
  {
    "objectID": "Instructional_design/Course_outline.html#topic-2-familiarization-with-computer-systems-and-language-translators",
    "href": "Instructional_design/Course_outline.html#topic-2-familiarization-with-computer-systems-and-language-translators",
    "title": "Python Programming",
    "section": "Topic 2: Familiarization with Computer Systems and Language Translators",
    "text": "Topic 2: Familiarization with Computer Systems and Language Translators\nLesson Outcomes:\n\nUnderstand basic computer architecture and components.\nIdentify different types of software and language translators.\n\nContent:\n\nIntroduction to Computer Architecture:\n\nBlock diagram of a computer\nHardware components (Input, Output devices)\nMemory types\n\nSoftware Types:\n\nHigh-level vs. Low-level languages\nAssembly languages\n\nLanguage Translators:\n\nCompilers, Interpreters, Assemblers\n\n\nPractical Situation:\n\nExplore how different programming languages and translators affect the execution of a simple program."
  },
  {
    "objectID": "Instructional_design/Course_outline.html#topic-3-justification-for-using-python",
    "href": "Instructional_design/Course_outline.html#topic-3-justification-for-using-python",
    "title": "Python Programming",
    "section": "Topic 3: Justification for Using Python",
    "text": "Topic 3: Justification for Using Python\nLesson Outcomes:\n\nUnderstand the advantages of Python for algorithmic thinking and programming.\nCompare Python with other programming languages in terms of simplicity and effectiveness.\n\nContent:\n\nWhy Python?\n\nPython’s simplicity and readability\nComparison with other languages (e.g., C++, Java)\nPython’s role in modern software development and data science\n\n\nPractical Situation:\n\nDemonstrate a basic Python script and compare it with an equivalent script in another language."
  },
  {
    "objectID": "Instructional_design/Course_outline.html#topic-4-developing-algorithms-and-flow-charts",
    "href": "Instructional_design/Course_outline.html#topic-4-developing-algorithms-and-flow-charts",
    "title": "Python Programming",
    "section": "Topic 4: Developing Algorithms and Flow Charts",
    "text": "Topic 4: Developing Algorithms and Flow Charts\nLesson Outcomes:\n\nDevelop and represent algorithms using flowcharts.\nUnderstand properties of good algorithms.\n\nContent:\n\nIntroduction to Algorithms:\n\nProperties of good algorithms\n\nFlowchart Creation:\n\nBasic flowchart symbols and conventions\n\n\nPractical Situation:\n\nDesign flowcharts for simple algorithms (e.g., sorting a list of numbers)."
  },
  {
    "objectID": "Instructional_design/Course_outline.html#topic-5-data-types-and-arithmetic-operations-in-python",
    "href": "Instructional_design/Course_outline.html#topic-5-data-types-and-arithmetic-operations-in-python",
    "title": "Python Programming",
    "section": "Topic 5: Data Types and Arithmetic Operations in Python",
    "text": "Topic 5: Data Types and Arithmetic Operations in Python\nLesson Outcomes:\n\nUnderstand and use basic data types and operators in Python.\nPerform arithmetic operations and handle expressions.\n\nContent: - Introduction to Python Programming:\n\nData types (int, float, str, etc.)\nKeywords and Variables\nInput and Output statements\nOperators and Arithmetic expressions\nOperator precedence and Evaluation of expressions\n\nPractical Situation:\n\nWrite a Python program that performs various arithmetic operations and displays results."
  },
  {
    "objectID": "Instructional_design/Course_outline.html#topic-6-conditional-statements-in-python",
    "href": "Instructional_design/Course_outline.html#topic-6-conditional-statements-in-python",
    "title": "Python Programming",
    "section": "Topic 6: Conditional Statements in Python",
    "text": "Topic 6: Conditional Statements in Python\nLesson Outcomes:\n\nImplement and use conditional statements to control the flow of programs.\n\nContent: - Types of Conditional Statements:\n\nif, if-else, elif, nested if-else, if-elif-else\nPractical Examples:\n\nPrograms using conditional statements\n\n\nPractical Situation:\n\nCreate a Python program that determines if a number is positive, negative, or zero."
  },
  {
    "objectID": "Instructional_design/Course_outline.html#topic-7-loop-structures-in-python",
    "href": "Instructional_design/Course_outline.html#topic-7-loop-structures-in-python",
    "title": "Python Programming",
    "section": "Topic 7: Loop Structures in Python",
    "text": "Topic 7: Loop Structures in Python\nLesson Outcomes:\n\nUse loop structures to repeat actions and iterate over data.\n\nContent:\n\nIntroduction to Looping:\n\nfor, while, nested loops\nbreak, continue, pass statements\nrange function\n\nSample Programs:\n\nImplementing various loop constructs\n\n\nPractical Situation:\n\nWrite a Python program that calculates the factorial of a number using loops."
  },
  {
    "objectID": "Instructional_design/Course_outline.html#topic-8-functions-in-python",
    "href": "Instructional_design/Course_outline.html#topic-8-functions-in-python",
    "title": "Python Programming",
    "section": "Topic 8: Functions in Python",
    "text": "Topic 8: Functions in Python\nLesson Outcomes:\n\nDefine and use functions for modular programming.\nUnderstand function concepts including parameter passing and return values.\n\nContent:\n\nConcept of Functions:\n\nDefinition, Calling Functions\nPassing Parameters and Return Values\nType Conversion and Coercion\n\nAdvanced Function Concepts:\n\nLambda functions\nBuilt-in Mathematical functions\n\nSample Programs Using Functions\n\nPractical Situation:\n\nDevelop a Python program that uses functions to perform mathematical operations."
  },
  {
    "objectID": "Instructional_design/Course_outline.html#topic-9-string-operations-in-python",
    "href": "Instructional_design/Course_outline.html#topic-9-string-operations-in-python",
    "title": "Python Programming",
    "section": "Topic 9: String Operations in Python",
    "text": "Topic 9: String Operations in Python\nLesson Outcomes:\n\nManipulate and process strings using Python’s string handling functions.\n\nContent:\n\nIntroduction to Strings:\n\nString creation and manipulation\n\nString Handling Functions:\n\nCommonly used functions (e.g., split(), join(), replace())\n\n\nPractical Situation:\n\nWrite a Python program that processes and formats user input strings."
  },
  {
    "objectID": "Instructional_design/Course_outline.html#topic-10-real-timetechnical-applications-using-data-structures",
    "href": "Instructional_design/Course_outline.html#topic-10-real-timetechnical-applications-using-data-structures",
    "title": "Python Programming",
    "section": "Topic 10: Real-time/Technical Applications Using Data Structures",
    "text": "Topic 10: Real-time/Technical Applications Using Data Structures\nLesson Outcomes:\n\nApply data structures (lists, tuples, dictionaries) to solve real-world problems.\n\nContent:\n\nLists, Tuples, Dictionaries:\n\nConcepts, operations, and functions\nMutable vs Immutable data structures\n\nApplications:\n\nIdentifying use cases\nSolving problems using lists, tuples, and dictionaries\n\n\nPractical Situation:\n\nCreate a Python program that manages a list of student records using lists and dictionaries."
  },
  {
    "objectID": "Instructional_design/Course_outline.html#topic-11-micro-project",
    "href": "Instructional_design/Course_outline.html#topic-11-micro-project",
    "title": "Python Programming",
    "section": "Topic 11: Micro Project",
    "text": "Topic 11: Micro Project\nLesson Outcomes:\n\nApply Python concepts to develop a project relevant to the student’s field of study.\n\nContent:\n\nProject Development:\n\nDesign and implementation of a simple project\nApplication of learned concepts to a practical problem\n\n\nPractical Situation:\n\nDevelop and present a micro project related to the student’s branch of study."
  },
  {
    "objectID": "hands_on.html",
    "href": "hands_on.html",
    "title": "Hands-on Session on Quarto",
    "section": "",
    "text": "Introduction to Quarto\nGet Started\nHands-on\n\nListings\nTemplates and Customization\nPrograming",
    "crumbs": [
      "Home",
      "Hands-on Session on Quarto"
    ]
  },
  {
    "objectID": "hands_on.html#agenda",
    "href": "hands_on.html#agenda",
    "title": "Hands-on Session on Quarto",
    "section": "",
    "text": "Introduction to Quarto\nGet Started\nHands-on\n\nListings\nTemplates and Customization\nPrograming",
    "crumbs": [
      "Home",
      "Hands-on Session on Quarto"
    ]
  },
  {
    "objectID": "hands_on.html#get-started",
    "href": "hands_on.html#get-started",
    "title": "Hands-on Session on Quarto",
    "section": "Get Started",
    "text": "Get Started\n\nDownloading Quarto\n\nDownload Quarto\n\nLinux\nMacOS\nWindows\n\nChoose your platform\n\nVS Code\nJupyter Notebook/Lab\nNeoVim\nRStudio\n\n\n\n\n\n\nDownload Quarto\n\nDownload Quarto: https://quarto.org/docs/get-started/\nWorkshop website: https://sijuswamy.github.io/CME-workshop-1/\n\n\nSetup\n\nTerminal + Text Editor (VS Code)\nVisual Studio Code has options to use quarto in a better user interface\n\n\n\nRun the command ‘quarto create project website ’\nAlternatively, ctrl+shift+p and create the quarto project\nAutomatically Quarto will create the following directory structure:\n\n_quarto.yml\nindex.qmd\nabout.qmd\nstyles.css\n\n\n\n\nStructure\n\n.yml files\n\nYAML is a human-readable data serialization language\nYAML is an official strict superset of JSON despite looking very different from JSON.\nTo create a YAML file, use either the .yaml or .yml file extension.\n\n.qmd files\n\nWork as markdown files, but they have a configuration section in yml on the top of the file\n\n\n\n\n_quarto.yml\n\nDefines the basic structure of the website.\nAll configurations are done using yml\nSome of the configurations:\n\nNavigation bar\nSide bar\nContents",
    "crumbs": [
      "Home",
      "Hands-on Session on Quarto"
    ]
  },
  {
    "objectID": "hands_on.html#listings",
    "href": "hands_on.html#listings",
    "title": "Hands-on Session on Quarto",
    "section": "Listings",
    "text": "Listings\n\nListings enable you to automatically generate the contents of a page (or region of a page) from a list of Quarto documents or other custom data\nUseful to create blogs, newletters\nLink to the documentation: https://quarto.org/docs/websites/website-listings.html",
    "crumbs": [
      "Home",
      "Hands-on Session on Quarto"
    ]
  },
  {
    "objectID": "hands_on.html#templates-and-customization",
    "href": "hands_on.html#templates-and-customization",
    "title": "Hands-on Session on Quarto",
    "section": "Templates and Customization",
    "text": "Templates and Customization\n\nSearch bar\n\nhttps://quarto.org/docs/websites/website-search.html\n\nThemes\n\nhttps://quarto.org/docs/output-formats/html-themes.html\n\nTools\n\nhttps://quarto.org/docs/websites/website-tools.html",
    "crumbs": [
      "Home",
      "Hands-on Session on Quarto"
    ]
  },
  {
    "objectID": "hands_on.html#programing",
    "href": "hands_on.html#programing",
    "title": "Hands-on Session on Quarto",
    "section": "Programing",
    "text": "Programing\n\nQuarto also provides the option to embed some code on your website\nQuarto supports Python, R, Julia and Observable Javascript\nYou can create a code block delimiting using ```\nExample of code running: https://tailor-uob.github.io/training-material/cha_odm/odm.html",
    "crumbs": [
      "Home",
      "Hands-on Session on Quarto"
    ]
  },
  {
    "objectID": "hands_on.html#programing-1",
    "href": "hands_on.html#programing-1",
    "title": "Hands-on Session on Quarto",
    "section": "Programing",
    "text": "Programing\n\nAlso Quarto allows the creation of short codes.\nShortcodes are special markdown directives that generate various types of content. Quarto shortcodes are similar in form and function to Hugo shortcodes and WordPress shortcodes.\nDocumentation: https://quarto.org/docs/extensions/shortcodes.html",
    "crumbs": [
      "Home",
      "Hands-on Session on Quarto"
    ]
  },
  {
    "objectID": "slides.html#agenda",
    "href": "slides.html#agenda",
    "title": "Hands-on Session on Quarto",
    "section": "Agenda",
    "text": "Agenda\n\nIntroduction to Quarto\nGet Started\nHands-on\n\nListings\nTemplates and Customization\nPrograming"
  },
  {
    "objectID": "slides.html#get-started",
    "href": "slides.html#get-started",
    "title": "Hands-on Session on Quarto",
    "section": "Get Started",
    "text": "Get Started\nDownloading Quarto\n\nDownload Quarto\n\nLinux\nMacOS\nWindows\n\nChoose your platform\n\nVS Code\nJupyter Notebook/Lab\nNeoVim\nRStudio"
  },
  {
    "objectID": "slides.html#listings",
    "href": "slides.html#listings",
    "title": "Hands-on Session on Quarto",
    "section": "Listings",
    "text": "Listings\n\nListings enable you to automatically generate the contents of a page (or region of a page) from a list of Quarto documents or other custom data\nUseful to create blogs, newletters\nLink to the documentation: https://quarto.org/docs/websites/website-listings.html"
  },
  {
    "objectID": "slides.html#templates-and-customization",
    "href": "slides.html#templates-and-customization",
    "title": "Hands-on Session on Quarto",
    "section": "Templates and Customization",
    "text": "Templates and Customization\n\nSearch bar\n\nhttps://quarto.org/docs/websites/website-search.html\n\nThemes\n\nhttps://quarto.org/docs/output-formats/html-themes.html\n\nTools\n\nhttps://quarto.org/docs/websites/website-tools.html"
  },
  {
    "objectID": "slides.html#programing",
    "href": "slides.html#programing",
    "title": "Hands-on Session on Quarto",
    "section": "Programing",
    "text": "Programing\n\nQuarto also provides the option to embed some code on your website\nQuarto supports Python, R, Julia and Observable Javascript\nYou can create a code block delimiting using ```\nExample of code running: https://tailor-uob.github.io/training-material/cha_odm/odm.html"
  },
  {
    "objectID": "slides.html#programing-1",
    "href": "slides.html#programing-1",
    "title": "Hands-on Session on Quarto",
    "section": "Programing",
    "text": "Programing\n\nAlso Quarto allows the creation of short codes.\nShortcodes are special markdown directives that generate various types of content. Quarto shortcodes are similar in form and function to Hugo shortcodes and WordPress shortcodes.\nDocumentation: https://quarto.org/docs/extensions/shortcodes.html"
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "This site contains information about a FDP organised in Saintgits College of Engineering (Autonomous) to disseminate the instructional design of the foundational course “Python Programming.” The FDP will guide educators through the course’s structure, emphasizing the integration of Python programming as a tool for implementing algorithmic concepts. Participants will gain hands-on experience with key tools such as GitHub, Python, Quarto, and Raptor, which are essential for both teaching and applying these concepts effectively.",
    "crumbs": [
      "Home",
      "About"
    ]
  },
  {
    "objectID": "about.html#workshop-organisers",
    "href": "about.html#workshop-organisers",
    "title": "About",
    "section": "Workshop organisers",
    "text": "Workshop organisers\n\n\n\n\n\n\n\n\n\nDr.Nisha Joseph\n\n\n\n\n\n\n\nDr. Naveen Punnoose\n\n\n\n\n\n\n\nEr. Justin Mathew",
    "crumbs": [
      "Home",
      "About"
    ]
  },
  {
    "objectID": "about.html#sidebar-image",
    "href": "about.html#sidebar-image",
    "title": "About",
    "section": "Sidebar image",
    "text": "Sidebar image\nThe sidebar image was generated by Microsoft Copilot with a prompt, “Transforming Classical Libraries to Digital Libraries with Open source.”",
    "crumbs": [
      "Home",
      "About"
    ]
  },
  {
    "objectID": "feedback.html",
    "href": "feedback.html",
    "title": "Feedback Analysis",
    "section": "",
    "text": "We value your feedback! Please take a moment to provide your insights on the workshop. Your responses will help us improve and tailor future sessions to better meet your needs.\n\n\nPlease rate the following statements on a scale of 1 to 5, where 1 is “Strongly Disagree” and 5 is “Strongly Agree”:\n\nHow effective was the workshop in teaching you to use Quarto for course Websites and technical writing?\n\n1\n2\n3\n4\n5\n\nHow clear was the discussions on the Instructional Design of the Course ?\n\n1\n2\n3\n4\n5\n\nHow beneficial was the hands-on approach and tools used in the FDP?\n\n1\n2\n3\n4\n5\n\nHow would you rate the knowledge and expertise of the resource person in the topics covered?\n\n1\n2\n3\n4\n5\n\nHow satisfactory was the support and assistance provided by the resource person during the workshop?\n\n1\n2\n3\n4\n5\n\n\nThank you for your feedback!\n\nYou can access the feedback form through the link below or scan the QR code to provide your responses:\nhttps://forms.gle/bHKwtrkV8JoN8KCc6"
  },
  {
    "objectID": "feedback.html#workshop-feedback-questionnaire",
    "href": "feedback.html#workshop-feedback-questionnaire",
    "title": "Feedback Analysis",
    "section": "",
    "text": "We value your feedback! Please take a moment to provide your insights on the workshop. Your responses will help us improve and tailor future sessions to better meet your needs.\n\n\nPlease rate the following statements on a scale of 1 to 5, where 1 is “Strongly Disagree” and 5 is “Strongly Agree”:\n\nHow effective was the workshop in teaching you to use Quarto for course Websites and technical writing?\n\n1\n2\n3\n4\n5\n\nHow clear was the discussions on the Instructional Design of the Course ?\n\n1\n2\n3\n4\n5\n\nHow beneficial was the hands-on approach and tools used in the FDP?\n\n1\n2\n3\n4\n5\n\nHow would you rate the knowledge and expertise of the resource person in the topics covered?\n\n1\n2\n3\n4\n5\n\nHow satisfactory was the support and assistance provided by the resource person during the workshop?\n\n1\n2\n3\n4\n5\n\n\nThank you for your feedback!\n\nYou can access the feedback form through the link below or scan the QR code to provide your responses:\nhttps://forms.gle/bHKwtrkV8JoN8KCc6"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "One Day Faculty Development Programme",
    "section": "",
    "text": "Welcome Note\nWelcome to this one-day Faculty Development Program! Today, we will explore the essential role of algorithmic thinking in engineering education and how it can be effectively taught using Python programming. The focus will be on how to shift from using tools and methods to designing innovative teaching solutions. We will also delve into practical hands-on training with tools like Quarto, Raptor, and Python code visualizers, which are designed to enhance teaching methods and facilitate a deeper understanding of computational thinking.\nBy the end of the session, you will have a comprehensive understanding of how to integrate algorithmic thinking into your teaching and how to utilize Python for implementing these concepts. Additionally, you will gain practical experience with various tools that can aid in presenting and visualizing these ideas effectively.\n\n\nObjectives\n\nTo Equip faculty with the skills to teach algorithmic thinking through Python programming and effective instructional design.\nTo Provide hands-on training on tools like Quarto, Raptor, and Python code visualizers to enhance teaching methods and course delivery.\n\n\n\nAgenda\n9:00 AM – 9:30 AM: Introduction and Overview\n\nWelcome and Overview:\n\nIntroduction to the day’s goals.\nImportance of algorithmic thinking in engineering education.\n\n\n9:30 AM – 11:00 AM: Introduction to GitHub, Account Creation, and Software Installation\n\nGitHub Introduction:\n\nOverview of GitHub and its role in version control and collaboration.\nCreate a GitHub account and explore basic functionalities.\n\nSoftware Installation:\n\nPython Installation: Guide through installing Python.\nVisual Studio Code (VSCode): Installation and setup for Python development.\nQuarto CLI: Installation and initial setup for dynamic document creation.\nHands-On Activity:\n\nCreate and push a simple repository to GitHub.\nVerify installations and configurations.\nSynchronize with GitHub using VScode.\n\n\n\n11:00 AM – 11:15 AM: Tea Break\n11:15 AM – 12:00 PM: The Role of High-Level Languages\n\nConcept Introduction:\n\nImportance and advantages of high-level programming languages.\n\nHands-On Activity:\n\nCompare a simple algorithm implemented in Python with versions in other languages (e.g., C, Java).\n\n\n12:00 PM – 12:30 PM: Python Programming for Algorithmic Implementation\n\nContent Overview:\n\nBasic Python programming concepts: syntax, data types, operators.\n\nHands-On Activity:\n\nDevelop Python programs to implement various algorithms.\n\n\n12:30 PM – 1:30 PM: Lunch Break\n1:30 PM – 2:15 PM: Tool Training: Quarto\n\nIntroduction to Quarto:\n\nCreating dynamic documents and using Quarto for literate programming.\n\nHands-On Activity:\n\nCreate a Quarto document to demonstrate publishing academic documents containing Python code.\n\n\n2:15 PM – 3:00 PM: Tool Training: Raptor\n\nIntroduction to Raptor:\n\nDesigning flowcharts and simulating algorithms using Raptor.\n\nHands-On Activity:\n\nDesign and test algorithms with Raptor.\n\n\n3:00 PM – 3:20 PM: Tea Break\n3:20 PM – 4:05 PM: Tool Training: Python Code Visualizers\n\nOverview of Code Visualizers:\n\nVisualizing and debugging Python code.\n\nHands-On Activity:\n\nUse code visualizers to understand and debug Python programs.\n\n\n4:05 PM – 4:20 PM: Conclusion and Q&A\n\nRecap:\n\nSummary of the day’s key takeaways.\n\nQ&A Session:\n\nAddress any questions and provide additional resources and support.",
    "crumbs": [
      "Home"
    ]
  },
  {
    "objectID": "Instructional_design/slides-quarto.html#course-title-python-programming-for-algorithmic-thinking",
    "href": "Instructional_design/slides-quarto.html#course-title-python-programming-for-algorithmic-thinking",
    "title": "Instructional Design for Python Programming",
    "section": "Course Title: Python Programming (for Algorithmic Thinking)",
    "text": "Course Title: Python Programming (for Algorithmic Thinking)\n\n\n\n\n\n\nCourse Description:\n\n\nThis lab-based one credit course introduces algorithmic thinking through Python programming. Designed for engineers, it covers fundamental programming concepts and their application to real-world problems. The course emphasizes the development of algorithms and their implementation in Python, preparing students to approach problem-solving methodically."
  },
  {
    "objectID": "Instructional_design/slides-quarto.html#course-objectives",
    "href": "Instructional_design/slides-quarto.html#course-objectives",
    "title": "Instructional Design for Python Programming",
    "section": "Course Objectives",
    "text": "Course Objectives\nThe course objecives are:\n\nCharacterize and Identify Computer Components:\n\nUnderstand and describe the functional units and components of a computer system, including hardware, software, and language translators.\n\nDevelop Proficiency in Python Programming:\n\nGain the ability to code, test, and debug simple Python programs, demonstrating proficiency in basic programming concepts and practices.\n\nImplement Control Structures:\n\nApply branching and looping statements in Python to develop programs that solve problems through conditional logic and repetitive tasks.\n\nUtilize Python Data Structures:\n\nEffectively use supported data structures such as lists, dictionaries, and tuples to organize and manage data in Python programs."
  },
  {
    "objectID": "Instructional_design/slides-quarto.html#course-outcomes",
    "href": "Instructional_design/slides-quarto.html#course-outcomes",
    "title": "Instructional Design for Python Programming",
    "section": "Course Outcomes",
    "text": "Course Outcomes\nAfter the successful completion of the course, the graduate will be able to:\n\nDesign and Implement Algorithms:\n\nDevelop, analyze, and apply algorithms to solve a variety of computational problems using Python.\n\nProgram Efficiently in Python:\n\nWrite, debug, and optimize Python code, utilizing core programming constructs and data structures effectively.\n\nApply Data Structures and Functions:\n\nUse Python’s data structures, such as lists, tuples, and dictionaries, and modularize code with functions for efficient problem-solving.\n\nUtilize Development Tools:\n\nLeverage development tools like GitHub and Raptor for effective coding, documentation, and algorithm visualization."
  },
  {
    "objectID": "Instructional_design/slides-quarto.html#course-introduction",
    "href": "Instructional_design/slides-quarto.html#course-introduction",
    "title": "Instructional Design for Python Programming",
    "section": "Course Introduction",
    "text": "Course Introduction\n\nTo introduce the “Python Programming for Algorithmic Thinking” course to students from various branches, begin by explaining the universal relevance of algorithmic thinking in everyday problem-solving. Use a simple context, such as organizing a group project: just as you would plan tasks and delegate responsibilities to ensure the project is completed efficiently and effectively, algorithmic thinking involves creating systematic methods to solve problems. A block diagram representing this example is given below.\n\n\n\n\n\n\ngraph TD\n    A[Start Project] --&gt; B[Identify Objectives]\n    B --&gt; C[Break Down Tasks]\n    C --&gt; D[Assign Responsibilities]\n    D --&gt; E[Set Deadlines]\n    E --&gt; F[Execute Tasks]\n    F --&gt; G[Monitor Progress]\n    G --&gt; H[Review and Adjust]\n    H --&gt; I[Complete Project]\n    I --&gt; J[Project Successful]\n\n    style A fill:#f9f,stroke:#333,stroke-width:2px,color:#000;\n    style B fill:#ccf,stroke:#333,stroke-width:2px,color:#000;\n    style C fill:#ccf,stroke:#333,stroke-width:2px,color:#000;\n    style D fill:#ccf,stroke:#333,stroke-width:2px,color:#000;\n    style E fill:#ccf,stroke:#333,stroke-width:2px,color:#000;\n    style F fill:#ccf,stroke:#333,stroke-width:2px,color:#000;\n    style G fill:#ccf,stroke:#333,stroke-width:2px,color:#000;\n    style H fill:#ccf,stroke:#333,stroke-width:2px,color:#000;\n    style I fill:#ccf,stroke:#333,stroke-width:2px,color:#000;\n    style J fill:#cfc,stroke:#333,stroke-width:2px,color:#000;\n\n\n\n\nFigure 1: State diagram to successfully finish a project.\n\n\n\n\n\nEmphasize that the (the algorithmic thinking) skills learned will be valuable across all engineering disciplines, enhancing their problem-solving capabilities and preparing them for complex challenges in their academic and professional careers. This approach will help students appreciate the broad applicability of the course content and encourage active participation."
  },
  {
    "objectID": "Instructional_design/slides-quarto.html#a-seven-in-one-problem",
    "href": "Instructional_design/slides-quarto.html#a-seven-in-one-problem",
    "title": "Instructional Design for Python Programming",
    "section": "A Seven-in-One Problem!",
    "text": "A Seven-in-One Problem!\nIn this context, we will explore how algorithmic thinking can be applied across different engineering branches using a common example. Each branch of engineering plays a critical role in developing and implementing this system, demonstrating the relevance and application of algorithms in diverse fields. Let us formulate the context and problem statement as follows.\n\n\n\n\n\n\nContext:\n\n\nA city wants to implement a smart traffic management system to improve traffic flow and reduce congestion at intersections. The system will use sensors and data analysis to control traffic lights dynamically.\n\n\n\n\n\n\n\n\n\nProblem:\n\n\nDesign an algorithm to manage traffic lights at a busy intersection based on real-time traffic data from sensors. The goal is to optimize traffic flow and minimize waiting times for vehicles.\n\n\n\n\nSteps for Algorithmic Thinking:"
  },
  {
    "objectID": "Instructional_design/slides-quarto.html#civil-engineering",
    "href": "Instructional_design/slides-quarto.html#civil-engineering",
    "title": "Instructional Design for Python Programming",
    "section": "1. Civil Engineering",
    "text": "1. Civil Engineering\n\nProblem: Design the layout of the intersection to ensure efficient traffic flow.\nAlgorithm: Develop an algorithm to determine optimal road layouts and signal timings based on traffic volume and road capacity.\n\nThe block diagram is shown in Fig- 2\n\n\n\n\n\n\ngraph TD\n    A[Design Intersection Layout] --&gt; B[Analyze Traffic Volume]\n    B --&gt; C[Determine Optimal Signal Timings]\n    C --&gt; D[Implement Traffic Light Control]\n    D --&gt; E[Monitor Traffic Flow]\n    E --&gt; F[Adjust Layout Based on Data]\n\n    style A fill:#f9f,stroke:#333,stroke-width:2px,color:#000;\n    style B fill:#ccf,stroke:#333,stroke-width:2px,color:#000;\n    style C fill:#ccf,stroke:#333,stroke-width:2px,color:#000;\n    style D fill:#ccf,stroke:#333,stroke-width:2px,color:#000;\n    style E fill:#ccf,stroke:#333,stroke-width:2px,color:#000;\n    style F fill:#cfc,stroke:#333,stroke-width:2px,color:#000;\n\n\n\n\nFigure 2: State diagram for Civil Engineering Tribe."
  },
  {
    "objectID": "Instructional_design/slides-quarto.html#mechanical-engineering",
    "href": "Instructional_design/slides-quarto.html#mechanical-engineering",
    "title": "Instructional Design for Python Programming",
    "section": "2. Mechanical Engineering:",
    "text": "2. Mechanical Engineering:\n\nProblem: Create a mechanism for automated traffic lights that can withstand varying weather conditions.\nAlgorithm: Develop an algorithm to control the mechanical parts of traffic lights and adjust for environmental factors.\n\nThe block diagram is shown in Fig- 3\n\n\n\n\n\n\ngraph TD\n    A[Design Traffic Light Mechanism] --&gt; B[Select Durable Materials]\n    B --&gt; C[Create Weather-Resistant Design]\n    C --&gt; D[Develop Control Mechanism]\n    D --&gt; E[Automate Traffic Light Adjustments]\n    E --&gt; F[Test Mechanism for Reliability]\n\n    style A fill:#f9f,stroke:#333,stroke-width:2px,color:#000;\n    style B fill:#ccf,stroke:#333,stroke-width:2px,color:#000;\n    style C fill:#ccf,stroke:#333,stroke-width:2px,color:#000;\n    style D fill:#ccf,stroke:#333,stroke-width:2px,color:#000;\n    style E fill:#ccf,stroke:#333,stroke-width:2px,color:#000;\n    style F fill:#cfc,stroke:#333,stroke-width:2px,color:#000;\n\n\n\n\nFigure 3: State diagram for Mechanical Engineering Tribe."
  },
  {
    "objectID": "Instructional_design/slides-quarto.html#chemical-engineering",
    "href": "Instructional_design/slides-quarto.html#chemical-engineering",
    "title": "Instructional Design for Python Programming",
    "section": "3. Chemical Engineering:",
    "text": "3. Chemical Engineering:\n\nProblem: Design materials for road signs and sensors that are durable and effective.\nAlgorithm: Develop an algorithm to evaluate and select materials based on their chemical properties and environmental impact.\n\nThe block diagram is shown in Fig- 4\n\n\n\n\n\n\ngraph TD\n    A[Design Road Signs and Sensors] --&gt; B[Evaluate Material Properties]\n    B --&gt; C[Select Chemical-Resistant Materials]\n    C --&gt; D[Ensure Environmental Impact]\n    D --&gt; E[Test Durability]\n    E --&gt; F[Implement in Traffic System]\n\n    style A fill:#f9f,stroke:#333,stroke-width:2px,color:#000;\n    style B fill:#ccf,stroke:#333,stroke-width:2px,color:#000;\n    style C fill:#ccf,stroke:#333,stroke-width:2px,color:#000;\n    style D fill:#ccf,stroke:#333,stroke-width:2px,color:#000;\n    style E fill:#ccf,stroke:#333,stroke-width:2px,color:#000;\n    style F fill:#cfc,stroke:#333,stroke-width:2px,color:#000;\n\n\n\n\nFigure 4: State diagram for Chemical Engineering Tribe."
  },
  {
    "objectID": "Instructional_design/slides-quarto.html#food-technology",
    "href": "Instructional_design/slides-quarto.html#food-technology",
    "title": "Instructional Design for Python Programming",
    "section": "4. Food Technology:",
    "text": "4. Food Technology:\n\nProblem: Ensure that traffic management systems in areas with food distribution centers do not disrupt deliveries.\nAlgorithm: Create an algorithm to prioritize traffic flow for delivery vehicles during peak hours to avoid delays.\n\nThe block diagram is shown in Fig- 5\n\n\n\n\n\n\ngraph TD\n    A[Assess Impact on Delivery Routes] --&gt; B[Prioritize Delivery Vehicles]\n    B --&gt; C[Design Traffic Light Scheduling]\n    C --&gt; D[Implement Scheduling in System]\n    D --&gt; E[Monitor Delivery Efficiency]\n    E --&gt; F[Adjust Based on Feedback]\n\n    style A fill:#f9f,stroke:#333,stroke-width:2px,color:#000;\n    style B fill:#ccf,stroke:#333,stroke-width:2px,color:#000;\n    style C fill:#ccf,stroke:#333,stroke-width:2px,color:#000;\n    style D fill:#ccf,stroke:#333,stroke-width:2px,color:#000;\n    style E fill:#ccf,stroke:#333,stroke-width:2px,color:#000;\n    style F fill:#cfc,stroke:#333,stroke-width:2px,color:#000;\n\n\n\n\nFigure 5: State diagram for Food Engineering Tribe."
  },
  {
    "objectID": "Instructional_design/slides-quarto.html#electronics-and-communication",
    "href": "Instructional_design/slides-quarto.html#electronics-and-communication",
    "title": "Instructional Design for Python Programming",
    "section": "5. Electronics and Communication:",
    "text": "5. Electronics and Communication:\n\nProblem: Implement sensor networks and communication systems for data collection and signal control.\nAlgorithm: Develop algorithms for data transmission, sensor data integration, and communication between traffic lights and control systems.\n\nThe block diagram is shown in Fig- 6\n\n\n\n\n\n\ngraph TD\n    A[Implement Sensor Network] --&gt; B[Design Data Transmission System]\n    B --&gt; C[Integrate Sensors with Traffic Lights]\n    C --&gt; D[Develop Communication Protocols]\n    D --&gt; E[Ensure Reliable Data Transfer]\n    E --&gt; F[Optimize Communication System]\n\n    style A fill:#f9f,stroke:#333,stroke-width:2px,color:#000;\n    style B fill:#ccf,stroke:#333,stroke-width:2px,color:#000;\n    style C fill:#ccf,stroke:#333,stroke-width:2px,color:#000;\n    style D fill:#ccf,stroke:#333,stroke-width:2px,color:#000;\n    style E fill:#ccf,stroke:#333,stroke-width:2px,color:#000;\n    style F fill:#cfc,stroke:#333,stroke-width:2px,color:#000;\n\n\n\n\nFigure 6: State diagram for Electronics and Communication Engineering Tribe."
  },
  {
    "objectID": "Instructional_design/slides-quarto.html#robotics-and-automation",
    "href": "Instructional_design/slides-quarto.html#robotics-and-automation",
    "title": "Instructional Design for Python Programming",
    "section": "6. Robotics and Automation:",
    "text": "6. Robotics and Automation:\n\nProblem: Automate the adjustment of traffic lights based on real-time data.\nAlgorithm: Design an algorithm to control automated systems that adjust traffic lights dynamically based on sensor data and predefined rules.\n\nThe block diagram is shown in Fig- 7\n\n\n\n\n\n\ngraph TD\n    A[Develop Automation System] --&gt; B[Create Real-Time Adjustment Algorithms]\n    B --&gt; C[Integrate with Traffic Lights]\n    C --&gt; D[Test for Dynamic Control]\n    D --&gt; E[Optimize Automation for Traffic Flow]\n    E --&gt; F[Monitor and Refine System]\n\n    style A fill:#f9f,stroke:#333,stroke-width:2px,color:#000;\n    style B fill:#ccf,stroke:#333,stroke-width:2px,color:#000;\n    style C fill:#ccf,stroke:#333,stroke-width:2px,color:#000;\n    style D fill:#ccf,stroke:#333,stroke-width:2px,color:#000;\n    style E fill:#ccf,stroke:#333,stroke-width:2px,color:#000;\n    style F fill:#cfc,stroke:#333,stroke-width:2px,color:#000;\n\n\n\n\nFigure 7: State diagram for Robotics Tribe."
  },
  {
    "objectID": "Instructional_design/slides-quarto.html#computer-science",
    "href": "Instructional_design/slides-quarto.html#computer-science",
    "title": "Instructional Design for Python Programming",
    "section": "7. Computer Science:",
    "text": "7. Computer Science:\n\nProblem: Create a software system to process traffic data and control traffic lights.\nAlgorithm: Develop a software algorithm that processes data from traffic sensors, makes real-time decisions on traffic light timings, and adjusts signals to optimize traffic flow.\n\nThe block diagram is shown in Fig- 8\n\n\n\n\n\n\ngraph TD\n    A[Develop Software System] --&gt; B[Process Traffic Data]\n    B --&gt; C[Implement Decision-Making Algorithms]\n    C --&gt; D[Control Traffic Lights Based on Data]\n    D --&gt; E[Test and Debug System]\n    E --&gt; F[Deploy and Monitor System]\n\n    style A fill:#f9f,stroke:#333,stroke-width:2px,color:#000;\n    style B fill:#ccf,stroke:#333,stroke-width:2px,color:#000;\n    style C fill:#ccf,stroke:#333,stroke-width:2px,color:#000;\n    style D fill:#ccf,stroke:#333,stroke-width:2px,color:#000;\n    style E fill:#ccf,stroke:#333,stroke-width:2px,color:#000;\n    style F fill:#cfc,stroke:#333,stroke-width:2px,color:#000;\n\n\n\n\nFigure 8: State diagram for Computer Science Tribe."
  },
  {
    "objectID": "Instructional_design/slides-quarto.html#expected-partial-outcome",
    "href": "Instructional_design/slides-quarto.html#expected-partial-outcome",
    "title": "Instructional Design for Python Programming",
    "section": "Expected Partial Outcome",
    "text": "Expected Partial Outcome\nBy designing and implementing algorithms for this traffic management system, engineers from various branches contribute to creating a more efficient and responsive traffic control system. Each branch applies algorithmic thinking to address specific aspects of the problem, demonstrating the relevance and application of algorithms in real-world scenarios.\n\n\n\n\n\n\nKey Takeaway\n\n\nBy engaging with the various engineering contexts illustrated through algorithmic thinking, students will gain a deeper appreciation for how structured problem-solving can lead to better planning, efficient design, and successful execution in real-world scenarios. Algorithmic thinking is not just about writing code but about systematically breaking down complex challenges into manageable steps, which is crucial for effective engineering solutions. Understanding and applying this approach will empower students to tackle problems more efficiently, optimize processes, and enhance their ability to innovate across different engineering disciplines.\n\n\n\nWait a second…\nFriends, do you ever think this instructional design might seem impractical? Let me challenge that idea. Time can feel like a stubborn illusion, but have you ever wondered how your students really perceive it? Imagine seeing their experience from their perspective. Do they feel confined by the rigid structures we often impose, or do they crave a more dynamic approach? By understanding how they truly think and engage with our sessions, we might find that what seems impractical to us could actually be exactly what they need to thrive. Let’s open our minds to how changing our approach can make a real difference in their learning experience. Just watch the following video.\n\nThe next session will focus on translating the conceptual framework of algorithmic thinking into a computational framework. This transition will involve exploring the fundamental components and functions of computer systems, which are essential for implementing algorithms in a practical programming environment."
  },
  {
    "objectID": "Instructional_design/slides-quarto.html#conceptual-to-computational",
    "href": "Instructional_design/slides-quarto.html#conceptual-to-computational",
    "title": "Instructional Design for Python Programming",
    "section": "Conceptual to Computational",
    "text": "Conceptual to Computational\nAlgorithmic thinking offers a robust conceptual framework for addressing complex problems through systematic decomposition into manageable steps. This method allows for effective planning, design, and implementation of solutions. However, transitioning from conceptual frameworks to practical applications necessitates a foundational understanding of computer systems.\nTo effectively translate algorithmic concepts into computational implementations, it is essential to grasp how computer systems operate. Knowledge of computer architecture, software types, and various programming tools is crucial for converting algorithms into executable programs and optimizing these solutions.\nThis course will introduce the basic components and functions of computer systems, including hardware, software, and programming environments. This foundational understanding will bridge the gap between theoretical algorithmic thinking and practical computational implementation, facilitating the effective application of algorithms in programming tasks.\nFamiliarization of Computer System, Editors, Various Language Translators\nKnowledge of computer architecture, including the roles of input/output devices, memory, and various types of software, enables programmers to write more efficient and effective code. This understanding helps in debugging, optimizing performance, and leveraging system resources effectively. By grasping how language translators like compilers, interpreters, and assemblers work, programmers can better appreciate how their code is transformed into executable instructions and troubleshoot issues with greater precision.\n\n\n\n\n\n\nThe poetry of programming\n\n\nTo showcase how the new generation views and engages with technology, we can draw inspiration from Linda Liukas’ TEDx talk. In her presentation, Liukas passionately argues that a significant movement in technology is underway, emphasizing the need for inclusive and diverse participation, especially from younger generations. Her vision of technology, framed as the “poetry of code,” highlights how creativity and diversity can shape a more vibrant and innovative tech landscape. By including her TEDx video, we can provide a compelling testimonial that illustrates how the next generation perceives and interacts with technology, reinforcing the importance of adapting our instructional designs to better connect with their perspectives and aspirations.\n\n\n\n\nIntroduction to Computer Architecture\n1. Block Diagram of Computer: The block diagram of a computer provides a visual representation of its major components and their interconnections. It typically includes the Central Processing Unit (CPU), Memory, Input Devices, Output Devices, and Storage Units. This diagram helps in understanding the flow of data and control signals within the computer system. A sample block diagram is shown in Fig- 9.\n\n\nFigure 9: Block Diagram of a Computer\n2. Hardware: Hardware refers to the physical components of a computer system. It includes the CPU, motherboard, RAM, hard drives, input devices (such as keyboards and mice), output devices (such as monitors and printers), and peripheral devices. Understanding hardware is crucial for comprehending how software interacts with physical components to perform tasks.\n3. Input and Output Devices: - Input Devices: These are devices used to enter data into a computer. Common examples include keyboards, mice, scanners, and microphones. - Output Devices: These devices display or output data from the computer. Examples include monitors, printers, and speakers.\n4. Memory: Memory in a computer system is used to store data and instructions. It includes: - Primary Memory (RAM): Volatile memory that temporarily holds data and instructions currently in use. - Secondary Memory (Storage): Non-volatile memory used for long-term data storage, such as hard drives and SSDs.\nSoftware\n1. Types of Software: - System Software: Includes operating systems (e.g., Windows, macOS, Linux) that manage hardware resources and provide a platform for running applications. - Application Software: Programs designed for end-users to perform specific tasks, such as word processors, web browsers, and games.\n2. High-Level Languages: High-level programming languages are designed to be easy for humans to read and write. Examples include Python, Java, and C++. They are used to write programs that are compiled or interpreted into machine code.\n3. Low-Level Languages: Low-level languages are closer to machine code and provide less abstraction from the hardware. Examples include assembly language, which is specific to a particular computer architecture and provides a symbolic representation of machine instructions.\n4. Assembly Languages: Assembly language is a low-level programming language that uses symbolic names for instructions and data. It is specific to a computer architecture and is used to write programs that interact directly with hardware.\nLanguage Translators\n1. Compiler: A compiler is a program that translates high-level source code into machine code or intermediate code that can be executed by the computer. It performs syntax checking, optimization, and generates executable files.\n2. Interpreter: An interpreter translates high-level source code into machine code line-by-line or statement-by-statement at runtime. It does not produce an executable file but directly executes the instructions. Examples include Python interpreters.\n3. Assembler: An assembler translates assembly language code into machine code. It converts symbolic instructions into binary instructions that the computer’s CPU can execute.\n\n\n\n\n\n\nNeed and Significance of Technical Know-how on Computer System\n\n\nUnderstanding the fundamentals of computer systems, including hardware components, software types, and language translators, is crucial for engineers as they move from conceptual ideas to practical, computer-based solutions. Familiarity with computer architecture helps engineers grasp how different hardware elements interact and how data flows through the system. Knowledge of software types and language translators enables engineers to select appropriate programming tools and languages for implementing their algorithms efficiently.\n\n\n\nBefore delving into the development of algorithms and flow charts, it is essential to understand the fundamental concepts of the computer system, as they provide the groundwork for translating conceptual ideas into computational solutions. The knowledge of computer architecture, memory, and software helps in effectively implementing and visualizing algorithms within a computer system.\nWith this foundational understanding in place, the focus shifts to developing algorithms and flow charts, which are designed with specific structures to facilitate standardization."
  },
  {
    "objectID": "Instructional_design/slides-quarto.html#developing-algorithms-and-flow-charts",
    "href": "Instructional_design/slides-quarto.html#developing-algorithms-and-flow-charts",
    "title": "Instructional Design for Python Programming",
    "section": "Developing Algorithms and Flow Charts",
    "text": "Developing Algorithms and Flow Charts\nIn the computational framework, standardizing the step-by-step process of algorithmic thinking is crucial for ensuring consistency and clarity in program development.\nIntroduction to Algorithms\n1. What is an Algorithm?\nAn algorithm is a well-defined sequence of steps or instructions designed to perform a specific task or solve a particular problem. It serves as a blueprint for writing computer programs. Algorithms are essential for problem-solving as they provide a clear and systematic approach to achieving desired outcomes.\n2. Properties of a Good Algorithm\nA well-constructed algorithm possesses several key properties: - Finiteness: The algorithm must have a finite number of steps and should terminate after a certain number of operations. - Definiteness: Each step of the algorithm should be precisely defined and unambiguous. - Input: The algorithm should accept zero or more inputs, which are the data necessary for its execution. - Output: The algorithm should produce at least one output, which is the result or solution of the problem. - Effectiveness: Each step of the algorithm should be basic enough to be executed within a finite amount of time.\nIntroduction to Flow Charts\n1. What is a Flow Chart?\nA flow chart is a visual representation of an algorithm, using various symbols to denote different types of operations or steps. Flow charts help in understanding and communicating the logic of an algorithm more clearly by illustrating the flow of control and decision-making process.\n2. Key Symbols in Flow Charts\n\nOval: Represents the start and end points of the flow chart.\nRectangle: Indicates a process or action step.\nDiamond: Denotes a decision point, where branching occurs based on conditions.\nParallelogram: Used for input and output operations.\nArrow: Shows the direction of flow between steps.\n\n\n\n\n\n\n\nStandardizing Algorithmic Thinking\n\n\nIn the computational framework, algorithms and flow charts are designed with a specific structure to ensure that the problem-solving approach is standardized. This standardization helps in maintaining consistency in how algorithms are developed, communicated, and executed. By adhering to these standardized structures, engineers and programmers can more effectively design, analyze, and implement solutions, ensuring that the computational processes are efficient and reliable.\n\n\n\nIn the upcoming sessions, students will have the opportunity to explore more examples and apply the principles of algorithmic thinking and flowchart design to a variety of problems.\n1. Crossing a Traffic Signal\nProblem: Write the algorithm and flowchart for the program to determine whether a pedestrian can cross the road based on the traffic signal color.\nAlgorithm:\n\nStart\nObserve the traffic signal color\nIf the signal is green, “Cross the road”\nElse if the signal is yellow, “Wait”\nElse if the signal is red, “wait”\nEnd\n\nFlowchart: Flowchart for this program is shown in Fig- 10.\n\n\n\n\n\n\nflowchart TD\n    A((Start)) --&gt; B{Check traffic light color}\n    B -- Red --&gt; C[Wait]\n    B -- Yellow --&gt; D[Wait]\n    B -- Green --&gt; E[Cross the road]\n    C --&gt; B\n    D --&gt; B\n    E --&gt; F((Stop))\n    \n    %% Define styles\n    classDef startEnd fill:#ffffff,stroke:#000000,color:#000000;\n    classDef inputOutput fill:#f0f0f0,stroke:#000000,color:#000000;\n    classDef decision fill:#e0e0e0,stroke:#000000,color:#000000;\n    \n    %% Apply styles to nodes\n    class A,H startEnd;\n    class B,D,F,G inputOutput;\n    class C,E decision;\n\n\n\n\nFigure 10: Flowchart of the program to cross the trafic signal.\n\n\n\n\n\n2. Finding the Maximum of Two Numbers\nProblem: Write the algorithm and draw the flowchart for the program that takes two numbers as input and prints the larger of the two.\nAlgorithm:\n\nStart\nInput two numbers, A and B\nIf A is greater than B, print A\nOtherwise, print B\nEnd\n\nFlowchart\nFlowchart for this program is shown in Fig- 11.\n\n\n\n\n\n\nflowchart TD\n    A([Start]) --&gt; B[Input A and B]\n    B --&gt; C{Is A &gt; B?}\n    C -- Yes --&gt; D[Print A]\n    C -- No --&gt; E[Print B]\n    D --&gt; F([End])\n    E --&gt; F\n    \n    %% Define styles\n    classDef startEnd fill:#ffffff,stroke:#000000,color:#000000;\n    classDef inputOutput fill:#f0f0f0,stroke:#000000,color:#000000;\n    classDef decision fill:#e0e0e0,stroke:#000000,color:#000000;\n    \n    %% Apply styles to nodes\n    class A,F startEnd;\n    class B,D,E inputOutput;\n    class C decision;\n\n\n\n\nFigure 11: Flowchart of the program to find larger of two numbers.\n\n\n\n\n\n3. Finding the Largest of Three Numbers\nProblem: Write a program that takes three numbers as input and prints the largest of the three.\nAlgorithm:\n\nStart\nInput three numbers, A, B, and C\nIf A is greater than B and A is greater than C, print A\nElse if B is greater than A and B is greater than C, print B\nOtherwise, print C\nEnd\n\nFlowchart: Flowchart for this program is shown in Fig- 12.\n\n\n\n\n\n\nflowchart TD\n    A([Start]) --&gt; B[Input A, B, and C]\n    B --&gt; C{Is A &gt; B?}\n    C --&gt;|Yes| D{Is A &gt; C?}\n    C --&gt;|No| E{Is B &gt; C?}\n    D -- Yes --&gt; F[Print A]\n    D -- No --&gt; G[Print C]\n    E -- Yes --&gt; H[Print B]\n    E -- No --&gt; G\n    F --&gt; I([End])\n    H --&gt; I\n    G --&gt; I\n    \n    %% Define styles\n    classDef startEnd fill:#ffffff,stroke:#000000,color:#000000;\n    classDef inputOutput fill:#f0f0f0,stroke:#000000,color:#000000;\n    classDef decision fill:#e0e0e0,stroke:#000000,color:#000000;\n    \n    %% Apply styles to nodes\n    class A,I startEnd;\n    class B,F,H inputOutput;\n    class C,D,E decision;\n\n\n\n\nFigure 12: Flowchart of the program to find largest of three numbers.\n\n\n\n\n\n4. Class Joining Dilema\nProblem: Write the algorithm and draw the flowchart for the program to determine whether a student will join a class based on whether their favorite teacher and best friend are in the class.\nAlgorithm:\n\nStart\nObserve the presence of the favorite teacher\nObserve the presence of the best friend\nIf both the favorite teacher and the best friend are present, “Join the class”\nElse, “Do not join the class”\nEnd\n\nFlowchart: Flowchart for this program is shown in Fig- 13.\n\n\n\n\n\n\nflowchart TD\n    A([Start]) --&gt; B{Is favourite teacher in class?}\n    B -- Yes --&gt; C{Is best friend in class?}\n    C -- Yes --&gt; D[Joins class]\n    B -- No --&gt; E[Does not join class]\n    C -- No --&gt; E[Does not join class]\n    E --&gt; F([Stop])\n    %% Define styles\n    classDef startEnd fill:#ffffff,stroke:#000000,color:#000000;\n    classDef inputOutput fill:#f0f0f0,stroke:#000000,color:#000000;\n    classDef decision fill:#e0e0e0,stroke:#000000,color:#000000;\n    \n    %% Apply styles to nodes\n    class A,I startEnd;\n    class B,F,H inputOutput;\n    class C,D,E decision;\n\n\n\n\nFigure 13: Flowchart of the program to join the class"
  },
  {
    "objectID": "Instructional_design/slides-quarto.html#transition-from-algorithmic-thinking-to-programming",
    "href": "Instructional_design/slides-quarto.html#transition-from-algorithmic-thinking-to-programming",
    "title": "Instructional Design for Python Programming",
    "section": "Transition from Algorithmic Thinking to Programming",
    "text": "Transition from Algorithmic Thinking to Programming\nThe algorithmic thinking process involves breaking down a problem into a series of logical steps, as illustrated by our flowcharts. This conceptual framework is very important for defining clear, sequential instructions to solve a problem. However, to bring these concepts into a practical domain, we need to translate them into a programming language that can execute these instructions."
  },
  {
    "objectID": "Instructional_design/slides-quarto.html#transition-from-algorithmic-thinking-to-programming-1",
    "href": "Instructional_design/slides-quarto.html#transition-from-algorithmic-thinking-to-programming-1",
    "title": "Instructional Design for Python Programming",
    "section": "Transition from Algorithmic Thinking to Programming",
    "text": "Transition from Algorithmic Thinking to Programming\nAlgorithmic thinking involves deconstructing problems into logical, sequential steps, as demonstrated by our flowcharts. Converting these concepts into a practical programming language allows us to execute these steps effectively. Historically, high-level programming languages like C, C++, and Java have been instrumental in translating algorithms into executable code. Here’s a comparison of these languages with Python, highlighting why Python is particularly suitable for computational thinking in engineering. Advantages of Python over other popular programming languages is explained in the following video."
  },
  {
    "objectID": "Instructional_design/slides-quarto.html#historical-context-and-comparison",
    "href": "Instructional_design/slides-quarto.html#historical-context-and-comparison",
    "title": "Instructional Design for Python Programming",
    "section": "Historical Context and Comparison",
    "text": "Historical Context and Comparison\nC Language\nDeveloped in the early 1970s, C is one of the earliest high-level programming languages. It provides a foundation for many modern languages and is known for its performance and low-level memory manipulation capabilities. C requires explicit management of memory and pointers, which adds complexity to code. While powerful, it lacks some of the high-level abstractions and simplicity found in Python.\nC++ Language\nAn extension of C, C++ was developed in the early 1980s and introduced object-oriented programming features. It allows for complex data modeling and high-performance applications. C++ offers more control over system resources but at the cost of increased complexity. It involves managing object-oriented concepts and memory explicitly, which can be challenging for beginners.\nJava Language\nDeveloped in the mid-1990s, Java is known for its portability across platforms, thanks to the Java Virtual Machine (JVM). It emphasizes object-oriented programming and has extensive libraries. Java’s syntax is more verbose compared to Python. It requires managing class structures and access modifiers, which can make code less straightforward to write and read."
  },
  {
    "objectID": "Instructional_design/slides-quarto.html#why-python-is-preferred-for-computational-thinking",
    "href": "Instructional_design/slides-quarto.html#why-python-is-preferred-for-computational-thinking",
    "title": "Instructional Design for Python Programming",
    "section": "Why Python is Preferred for Computational Thinking?",
    "text": "Why Python is Preferred for Computational Thinking?\nPython, created by Guido van Rossum and first released in 1991, emerged from a desire to develop a language that was both easy to read and write, while also being powerful enough to handle complex tasks. It was inspired by the ABC language, which van Rossum had worked on during his time at Centrum Wiskunde & Informatica (CWI) in the Netherlands. Python’s base code was written in C, which provides a solid foundation for its extensive standard library and cross-platform capabilities. The language emphasizes readability and simplicity, featuring an elegant syntax that allows programmers to express concepts in fewer lines of code compared to many other languages. This design philosophy has contributed to Python’s widespread adoption across various fields, from web development to scientific computing and engineering. Popular features of Python programming language are:\n1. Readability and Simplicity\nPython’s syntax is designed to be clear and intuitive, resembling natural language. This simplicity allows engineers to focus on the logic of their algorithms without being bogged down by complex syntax. For computational thinking, where clarity and understanding are crucial, Python’s readability reduces cognitive load, making it easier to implement and debug algorithms.\n2. Versatility and Ease of Use\nPython supports multiple programming paradigms, including procedural, object-oriented, and functional programming. Its versatility makes it suitable for a wide range of applications, from simple scripts to complex systems. This adaptability is particularly useful in engineering, where problems often span different domains and require diverse approaches.\n3. Rich Libraries and Frameworks\nPython’s extensive standard library and third-party modules simplify many tasks. Libraries such as NumPy for numerical computations, pandas for data manipulation, and Matplotlib for visualization provide powerful tools for engineers. These libraries streamline the implementation of complex algorithms and data handling, making Python an efficient choice for solving engineering problems.\n\n\n\n\n\n\nVerdict\n\n\nThe historical languages like C, C++, and Java have their strengths, Python’s readability, versatility, and extensive libraries make it particularly well-suited for computational thinking in engineering. By transitioning from conceptual algorithmic thinking to practical Python programming, engineers can effectively apply and implement their problem-solving strategies in a straightforward and efficient manner.\n\n\n\nFuture sessions will delve into various Python examples, reinforcing the practical application of these concepts and preparing students for advanced problem-solving in their respective engineering fields.\nJust a second…\nProgramming extends beyond mere coding, which involves translating instructions into a form that computers can execute. While coding focuses on syntax and grammar, programming encompasses the entire process of solving problems, from understanding the problem and designing algorithms to implementing and testing solutions. This broader view highlights the importance of logical thinking, a skill central to effective programming. According to Lesli Lambort, “Programming is not just about writing code; it’s about creating solutions through a logical process.” This involves breaking down complex problems, understanding their components, and systematically building solutions. Just watch what Labort saying on this topic."
  },
  {
    "objectID": "Instructional_design/slides-quarto.html#python-fundamentals",
    "href": "Instructional_design/slides-quarto.html#python-fundamentals",
    "title": "Instructional Design for Python Programming",
    "section": "Python Fundamentals",
    "text": "Python Fundamentals\nPython Programming Overview\nPython is a high-level, interpreted programming language that was created by Guido van Rossum and first released in 1991. Its design philosophy emphasizes code readability and simplicity, making it an excellent choice for both beginners and experienced developers. Over the years, Python has undergone significant development and improvement, with major releases adding new features and optimizations. The language’s versatility and ease of use have made it popular in various domains, including web development, data science, artificial intelligence, scientific computing, automation, and more. Python’s extensive standard library and active community contribute to its widespread adoption, making it one of the most popular programming languages in the world today.\nVariables\nIn Python, variables are used to store data that can be used and manipulated throughout a program. Variables do not need explicit declaration to reserve memory space. The declaration happens automatically when a value is assigned to a variable.\nBasic Input/Output Functions\nPython provides built-in functions for basic input and output operations. The print() function is used to display output, while the input() function is used to take input from the user.\nOutput with print() function\n\nTemplateDIY\n\n\n# Printing text\nprint(\"Hello, World!\")\n\n# Printing multiple values\nx = 5\ny = 10\nprint(\"The value of x is:\", x, \"and the value of y is:\", y)\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\n\nExample 2\n\n\nTemplateDIY\n\n\n# Assigning values to variables\na = 10\nb = 20.5\nname = \"Alice\"\n\n# Printing the values\nprint(\"Values Stored in the Variables:\")\nprint(a)\nprint(b)\nprint(name)\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\nInput with input() Function:\n\nTemplateDIY\n\n\n# Taking input from the user\nname = input(\"Enter your name: \")\nprint(\"Hello, \" + name + \"!\")\n\n# Taking numerical input\nage = int(input(\"Enter your age: \"))\nprint(\"You are\", age, \"years old.\")\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\n\n\n\n\n\n\nNote\n\n\nThe print() function in Python, defined in the built-in __builtin__ module, is used to display output on the screen, providing a simple way to output text and variable values to the console.\n\n\n\nCombining Variables and Input/Output\nus can combine variables and input/output functions to create interactive programs.\n\nExample: Find sum of two numbers\n\n\nTemplateDIY\n\n\n# Program to calculate the sum of two numbers\nnum1 = float(input(\"Enter first number: \"))\nnum2 = float(input(\"Enter second number: \"))\n\n# Calculate sum\nsum = num1 + num2\n\n# Display the result\nprint(\"The sum of\", num1, \"and\", num2, \"is\", sum)\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\nPython Programming Style\nIndentation\nPython uses indentation to define the blocks of code. Proper indentation is crucial as it affects the program’s flow. Use 4 spaces per indentation level. For example consider the conditional statement below to find the larger among two numbers \\(a\\) and \\(b\\). Here to encapsulate the if part, we just use an indendation of 4 white spaces, similar for the else part.\nif a &gt; b:\n    print(\"a is greater than b\")\nelse:\n    print(\"b is greater than or equal to a\")\nComments\nUse comments to explain user code. Comments begin with the # symbol and extend to the end of the line. Write comments that are clear and concise. See the example:\n# This is a comment\na = 10  # This is an inline comment\nHere the first line is just a comment. But in the second line, the comment is used to explain what that line of code do!\nVariable Naming\nUse meaningful variable names to make the code more understandable. Variable names should be in lowercase with words separated by underscores. Two examples are given below.\nstudent_name = \"John\"\ntotal_score = 95\nConsistent Style\nFollow the PEP 8 style guide for Python code to maintain consistency and readability. Use blank lines to separate different sections of usr code. See the following example of function definition:\n\ndef calculate_sum(x, y):\n    return x + y\n\nresult = calculate_sum(5, 3)\nprint(result)"
  },
  {
    "objectID": "Instructional_design/slides-quarto.html#basic-datatypes-in-python",
    "href": "Instructional_design/slides-quarto.html#basic-datatypes-in-python",
    "title": "Instructional Design for Python Programming",
    "section": "Basic Datatypes in Python",
    "text": "Basic Datatypes in Python\nIn Python, a datatype is a classification that specifies which type of value a variable can hold. Understanding datatypes is essential as it helps in performing appropriate operations on variables. Python supports various built-in datatypes, which can be categorized into several groups.\nNumeric Types\nNumeric types represent data that consists of numbers. Python has three distinct numeric types:\n\nIntegers (int):\n\nWhole numbers, positive or negative, without decimals.\nExample: a = 10, b = -5.\n\nFloating Point Numbers (float):\n\nNumbers that contain a decimal point.\nExample: pi = 3.14, temperature = -7.5.\n\nComplex Numbers (complex):\n\nNumbers with a real and an imaginary part.\nExample: z = 3 + 4j.\n\n\n# Examples of numeric types\na = 10         # Integer\npi = 3.14      # Float\nz = 3 + 4j     # Complex\n\n\n\n\n\n\nHow to find datatype of a variable?\n\n\nTo get the type of a variable in Python, you can use the built-in type() function.\nThe basic syntax looks like this:\ntype(variable_name)\nWe can try this function in the above example as follows.\n\nTemplateDIY\n\n\n# Examples of numeric types\na = 10         # Integer\npi = 3.14      # Float\nz = 3 + 4j     # Complex\n# extract datatype\n\ntype(a)\ntype(pi)\ntype(z)\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\nSequence Types\nSequence types are used to store multiple items in a single variable. Python has several sequence types, including:\nString Type\nStrings in Python are sequences of characters enclosed in quotes. They are used to handle and manipulate textual data.\nCharacteristics of Strings\n\nOrdered: Characters in a string have a defined order.\nImmutable: Strings cannot be modified after they are created.\nHeterogeneous: Strings can include any combination of letters, numbers, and symbols.\n\nCreating Strings\nStrings can be created using single quotes, double quotes, or triple quotes for multiline strings.\n\nExample:\n\n# Creating strings with different types of quotes\nsingle_quoted = 'Hello, World!'\ndouble_quoted = \"Hello, World!\"\nmultiline_string = \"\"\"This is a\nmultiline string\"\"\"\n\nPython CodeOutput\n\n\n\n\n\n\n\n\n\nAccessing String Characters\nCharacters in a string are accessed using their index, with the first character having an index of 0. Negative indexing can be used to access characters from the end.\n\nExample:\n\n# Accessing characters in a string\nfirst_char = single_quoted[0]  # Output: 'H'\nlast_char = single_quoted[-1]  # Output: '!'\n\nPython CodeOutput\n\n\n\n\n\n\n\n\n\nCommon String Methods\nPython provides various methods for string manipulation:\n\nupper(): Converts all characters to uppercase.\nlower(): Converts all characters to lowercase.\nstrip(): Removes leading and trailing whitespace.\nreplace(old, new): Replaces occurrences of a substring with another substring.\nsplit(separator): Splits the string into a list based on a separator.\n\n\nExample:\n\n# Using string methods\ntext = \"   hello, world!   \"\nuppercase_text = text.upper()       # Result: \"   HELLO, WORLD!   \"\nstripped_text = text.strip()        # Result: \"hello, world!\"\nreplaced_text = text.replace(\"world\", \"Python\")  # Result: \"   hello, Python!   \"\nwords = text.split(\",\")             # Result: ['hello', ' world!   ']\n\nPython CodeOutput\n\n\n\n\n\n\n\n\n\nList Type\nLists are one of the most versatile and commonly used sequence types in Python. They allow for the storage and manipulation of ordered collections of items.\n\nCharacteristics of Lists\n\n\nOrdered: The items in a list have a defined order, which will not change unless explicitly modified.\nMutable: The content of a list can be changed after its creation (i.e., items can be added, removed, or modified).\nDynamic: Lists can grow or shrink in size as items are added or removed.\nHeterogeneous: Items in a list can be of different data types (e.g., integers, strings, floats).\n\nCreating Lists\nLists are created by placing comma-separated values inside square brackets.\n\nExample:\n\n# Creating a list of fruits\nfruits = [\"apple\", \"banana\", \"cherry\"]\n\n# Creating a mixed list\nmixed_list = [1, \"Hello\", 3.14]\n\nPython CodeOutput\n\n\n\n\n\n\n\n\n\nAccessing List Items\nList items are accessed using their index, with the first item having an index of 0.\n\nExample:\n\n\n# Accessing the first item\nfirst_fruit = fruits[0]  # Output: \"apple\"\n\n# Accessing the last item\nlast_fruit = fruits[-1]  # Output: \"cherry\"\n\nPython CodeOutput\n\n\n\n\n\n\n\n\n\nModifying Lists\nLists can be modified by changing the value of specific items, adding new items, or removing existing items.\n\nExample:\n\n# Changing the value of an item\nfruits[1] = \"blueberry\"  # fruits is now [\"apple\", \"blueberry\", \"cherry\"]\n\n# Adding a new item\nfruits.append(\"orange\")  # fruits is now [\"apple\", \"blueberry\", \"cherry\", \"orange\"]\n\n# Removing an item\nfruits.remove(\"blueberry\")  # fruits is now [\"apple\", \"cherry\", \"orange\"]\n\nPython CodeOutput\n\n\n\n\n\n\n\n\n\nList Methods\nPython provides several built-in methods to work with lists:\n\nappend(item): Adds an item to the end of the list.\ninsert(index, item): Inserts an item at a specified index.\nremove(item): Removes the first occurrence of an item.\npop(index): Removes and returns the item at the specified index.\nsort(): Sorts the list in ascending order.\nreverse(): Reverses the order of the list.\n\n\nExample:\n\n# Using list methods\nnumbers = [5, 2, 9, 1]\n\nnumbers.append(4)     # numbers is now [5, 2, 9, 1, 4]\nnumbers.sort()        # numbers is now [1, 2, 4, 5, 9]\nnumbers.reverse()     # numbers is now [9, 5, 4, 2, 1]\nfirst_number = numbers.pop(0)  # first_number is 9, numbers is now [5, 4, 2, 1]\n\nPython CodeOutput\n\n\n\n\n\n\n\n\n\nTuple Type\nTuples are a built-in sequence type in Python that is used to store an ordered collection of items. Unlike lists, tuples are immutable, which means their contents cannot be changed after creation.\nCharacteristics of Tuples\n\nOrdered: Tuples maintain the order of items, which is consistent throughout their lifetime.\nImmutable: Once a tuple is created, its contents cannot be modified. This includes adding, removing, or changing items.\nFixed Size: The size of a tuple is fixed; it cannot grow or shrink after creation.\nHeterogeneous: Tuples can contain items of different data types, such as integers, strings, and floats.\n\nCreating Tuples\nTuples are created by placing comma-separated values inside parentheses. Single-element tuples require a trailing comma.\n\nExample:\n\n# Creating a tuple with multiple items\ncoordinates = (10, 20, 30)\n\n# Creating a single-element tuple\nsingle_element_tuple = (5,)\n\n# Creating a tuple with mixed data types\nmixed_tuple = (1, \"Hello\", 3.14)\n\nPython CodeOutput\n\n\n\n\n\n\n\n\n\nAccessing Tuple Items\nTuple items are accessed using their index, with the first item having an index of 0. Negative indexing can be used to access items from the end.\n\nExample:\n\n# Accessing the first item\nx = coordinates[0]  # Output: 10\n\n# Accessing the last item\nz = coordinates[-1]  # Output: 30\n\nPython CodeOutput\n\n\n\n\n\n\n\n\n\nModifying Tuples\nSince tuples are immutable, their contents cannot be modified. However, us can create new tuples by combining or slicing existing ones.\n\nExample:\n\n# Combining tuples\nnew_coordinates = coordinates + (40, 50)  # Result: (10, 20, 30, 40, 50)\n\n# Slicing tuples\nsub_tuple = coordinates[1:3]  # Result: (20, 30)\n\nPython CodeOutput\n\n\n\n\n\n\n\n\n\nTuple Methods\nTuples have a limited set of built-in methods compared to lists:\n\ncount(item): Returns the number of occurrences of the specified item.\nindex(item): Returns the index of the first occurrence of the specified item.\n\n\nExample:\n\n# Using tuple methods\nnumbers = (1, 2, 3, 1, 2, 1)\n\n# Counting occurrences of an item\ncount_1 = numbers.count(1)  # Result: 3\n\n# Finding the index of an item\nindex_2 = numbers.index(2)  # Result: 1\n\nPython CodeOutput\n\n\n\n\n\n\n\n\n\nMapping Types\nMapping types in Python are used to store data in key-value pairs. Unlike sequences, mappings do not maintain an order and are designed for quick lookups of data.\nDictionary (dict)\nThe primary mapping type in Python is the dict. Dictionaries store data as key-value pairs, where each key must be unique, and keys are used to access their corresponding values.\nCharacteristics of Dictionaries\n\nUnordered: The order of items is not guaranteed and may vary.\nMutable: us can add, remove, and change items after creation.\nKeys: Must be unique and immutable (e.g., strings, numbers, tuples).\nValues: Can be of any data type and can be duplicated.\n\nCreating Dictionaries\nDictionaries are created using curly braces {} with key-value pairs separated by colons :.\n\nExample:\n\n# Creating a dictionary\nstudent = {\n    \"name\": \"Alice\",\n    \"age\": 21,\n    \"major\": \"Computer Science\"\n}\n\nPython CodeOutput\n\n\n\n\n\n\n\n\n\nAccessing and Modifying Dictionary Items\nItems in a dictionary are accessed using their keys. us can also modify, add, or remove items.\n\nExample:\n\n# Accessing a value\nname = student[\"name\"]  # Output: \"Alice\"\n\n# Modifying a value\nstudent[\"age\"] = 22  # Updates the age to 22\n\n# Adding a new key-value pair\nstudent[\"graduation_year\"] = 2024\n\n# Removing a key-value pair\ndel student[\"major\"]\n\nPython CodeOutput\n\n\n\n\n\n\n\n\n\nDictionary Methods\nPython provides several built-in methods to work with dictionaries:\n\nkeys(): Returns a view object of all keys.\nvalues(): Returns a view object of all values.\nitems(): Returns a view object of all key-value pairs.\nget(key, default): Returns the value for the specified key, or a default value if the key is not found.\npop(key, default): Removes and returns the value for the specified key, or a default value if the key is not found.\n\n\nExample:\n\n# Using dictionary methods\nkeys = student.keys()        # Result: dict_keys(['name', 'age', 'graduation_year'])\nvalues = student.values()    # Result: dict_values(['Alice', 22, 2024])\nitems = student.items()      # Result: dict_items([('name', 'Alice'), ('age', 22), ('graduation_year', 2024)])\nname = student.get(\"name\")  # Result: \"Alice\"\nage = student.pop(\"age\")    # Result: 22\n\nPython CodeOutput\n\n\n\n\n\n\n\n\n\nSet Types\nSets are a built-in data type in Python used to store unique, unordered collections of items. They are particularly useful for operations involving membership tests, set operations, and removing duplicates.\nCharacteristics of Sets\n\nUnordered : The items in a set do not have a specific order and may change.\nMutable : us can add or remove items from a set after its creation.\nUnique : Sets do not allow duplicate items; all items must be unique.\nUnindexed : Sets do not support indexing or slicing.\n\nCreating Sets\nSets are created using curly braces {} with comma-separated values, or using the set() function.\n\nExample:\n\n# Creating a set using curly braces\nfruits = {\"apple\", \"banana\", \"cherry\"}\n\n# Creating a set using the set() function\nnumbers = set([1, 2, 3, 4, 5])\n\nPython CodeOutput\n\n\n\n\n\n\n\n\n\nAccessing and Modifying Set Items\nWhile us cannot access individual items by index, us can check for membership and perform operations like adding or removing items.\n\nExample:\n\n# Checking membership\nhas_apple = \"apple\" in fruits  # Output: True\n\n# Adding an item\nfruits.add(\"orange\")\n\n# Removing an item\nfruits.remove(\"banana\")  # Raises KeyError if item is not present\n\nPython CodeOutput\n\n\n\n\n\n\n\n\n\nSet Operations Sets support various mathematical set operations, such as union, intersection, and difference.\n\nExample:\n\n# Union of two sets\nset1 = {1, 2, 3}\nset2 = {3, 4, 5}\nunion = set1 | set2  # Result: {1, 2, 3, 4, 5}\n\n# Intersection of two sets\nintersection = set1 & set2  # Result: {3}\n\n# Difference between two sets\ndifference = set1 - set2  # Result: {1, 2}\n\n# Symmetric difference (items in either set, but not in both)\nsymmetric_difference = set1 ^ set2  # Result: {1, 2, 4, 5}\n\nPython CodeOutput\n\n\n\n\n\n\n\n\n\nSet Methods\nPython provides several built-in methods for set operations:\n\nadd(item): Adds an item to the set.\nremove(item): Removes an item from the set; raises KeyError if item is not present.\ndiscard(item): Removes an item from the set if present; does not raise an error if item is not found.\npop(): Removes and returns an arbitrary item from the set.\nclear(): Removes all items from the set.\n\n\nExample:\n\n# Using set methods\nset1 = {1, 2, 3}\n\nset1.add(4)        # set1 is now {1, 2, 3, 4}\nset1.remove(2)     # set1 is now {1, 3, 4}\nset1.discard(5)    # No error, set1 remains {1, 3, 4}\nitem = set1.pop()  # Removes and returns an arbitrary item, e.g., 1\nset1.clear()      # set1 is now an empty set {}\n\nPython CodeOutput\n\n\n\n\n\n\n\n\n\n## Frozen Sets\nFrozen sets are a built-in data type in Python that are similar to sets but are immutable. Once created, a frozen set cannot be modified, making it suitable for use as a key in dictionaries or as elements of other sets.\nCharacteristics of Frozen Sets\n\nUnordered : The items in a frozen set do not have a specific order and may change.\nImmutable : Unlike regular sets, frozen sets cannot be altered after creation. No items can be added or removed.\nUnique : Like sets, frozen sets do not allow duplicate items; all items must be unique.\nUnindexed : Frozen sets do not support indexing or slicing.\n\nCreating Frozen Sets\nFrozen sets are created using the frozenset() function, which takes an iterable as an argument.\n\nExample:\n\n# Creating a frozen set\nnumbers = frozenset([1, 2, 3, 4, 5])\n\n# Creating a frozen set from a set\nfruits = frozenset({\"apple\", \"banana\", \"cherry\"})\n\nPython CodeOutput\n\n\n\n\n\n\n\n\n\nAccessing and Modifying Frozen Set Items\nFrozen sets do not support modification operations such as adding or removing items. However, us can perform membership tests and other set operations.\n\nExample:\n\n# Checking membership\nhas_apple = \"apple\" in fruits  # Output: True\n\n# Since frozenset is immutable, us cannot use add() or remove() methods\n\nPython CodeOutput\n\n\n\n\n\n\n\n\n\nSet Operations with Frozen Sets\nFrozen sets support various mathematical set operations similar to regular sets, such as union, intersection, and difference. These operations return new frozen sets and do not modify the original ones.\n\nExample:\n\n# Union of two frozen sets\nset1 = frozenset([1, 2, 3])\nset2 = frozenset([3, 4, 5])\nunion = set1 | set2  # Result: frozenset({1, 2, 3, 4, 5})\n\n# Intersection of two frozen sets\nintersection = set1 & set2  # Result: frozenset({3})\n\n# Difference between two frozen sets\ndifference = set1 - set2  # Result: frozenset({1, 2})\n\n# Symmetric difference (items in either set, but not in both)\nsymmetric_difference = set1 ^ set2  # Result: frozenset({1, 2, 4, 5})\n\nPython CodeOutput\n\n\n\n\n\n\n\n\n\nFrozen Set Methods\nFrozen sets have a subset of the methods available to regular sets. The available methods include:\n\ncopy() : Returns a shallow copy of the frozen set.\ndifference(other) : Returns a new frozen set with elements in the original frozen set but not in other.\nintersection(other) : Returns a new frozen set with elements common to both frozen sets.\nunion(other) : Returns a new frozen set with elements from both frozen sets.\nsymmetric_difference(other) : Returns a new frozen set with elements in either frozen set but not in both.\n\n\nExample:\n\n# Using frozen set methods\nset1 = frozenset([1, 2, 3])\nset2 = frozenset([3, 4, 5])\n\n# Getting the difference\ndifference = set1.difference(set2)  # Result: frozenset({1, 2})\n\n# Getting the intersection\nintersection = set1.intersection(set2)  # Result: frozenset({3})\n\n# Getting the union\nunion = set1.union(set2)  # Result: frozenset({1, 2, 3, 4, 5})\n\n# Getting the symmetric difference\nsymmetric_difference = set1.symmetric_difference(set2)  # Result: frozenset({1, 2, 4, 5})\n\nPython CodeOutput\n\n\n\n\n\n\n\n\n\n\nControl Structures in Python\nControl structures in Python allow us to control the flow of execution in our programs. They help manage decision-making, looping, and the execution of code blocks based on certain conditions. Python provides several key control structures: if statements, for loops, while loops, and control flow statements like break, continue, and pass.\nConditional Statements\nConditional statements are used to execute code based on certain conditions. The primary conditional statement in Python is the if statement, which can be combined with elif and else to handle multiple conditions.\n\nSyntax:\n\nif condition:\n    # Code block to execute if condition is True\nelif another_condition:\n    # Code block to execute if another_condition is True\nelse:\n    # Code block to execute if none of the above conditions are True\n\nExample: Program to classify a person based on his/her age.\n\nage = 20\n\nif age &lt; 18:\n    print(\"us are a minor.\")\nelif age &lt; 65:\n    print(\"us are an adult.\")\nelse:\n    print(\"us are a senior citizen.\")\n\nPython CodeOutput\n\n\n\n\n\n\n\n\n\nLooping Statements\nLooping statements are used to repeat a block of code multiple times. Python supports for loops and while loops.\nFor Loop\nThe for loop iterates over a sequence (like a list, tuple, or string) and executes a block of code for each item in the sequence.\n\nSyntax:\n\nfor item in sequence:\n    # Code block to execute for each item\n\nExample: Program to print names of fruits saved in a list.\n\n# Iterating over a list\nfruits = [\"apple\", \"banana\", \"cherry\"]\nfor fruit in fruits:\n    print(fruit)\n\nPython CodeOutput\n\n\n\n\n\n\n\n\n\nWhile Loop\nThe while loop repeatedly executes a block of code as long as a specified condition is True.\n\nSyntax:\n\nwhile condition:\n    # Code block to execute while condition is True\n\nExample: Print all counting numbers less than 5.\n\n# Counting from 0 to 4\ncount = 0\nwhile count &lt; 5:\n    print(count)\n    count += 1\n\nPython CodeOutput\n\n\n\n\n\n\n\n\n\nControl Flow Statements\nControl flow statements alter the flow of execution within loops and conditionals.\nBreak Statement\nThe break statement exits the current loop, regardless of the loop’s condition.\n\nExample: Program to exit from the printing of whole numbers less than 10, while trigger 5.\n\nfor i in range(10):\n    if i == 5:\n        break\n    print(i)\n# Output: 0 1 2 3 4\n\nPython CodeOutput\n\n\n\n\n\n\n\n\n\nContinue Statement\nThe continue statement skips the rest of the code inside the current loop iteration and proceeds to the next iteration.\n\nExample: Program to print all the whole numbers in the range 5 except 2.\n\nfor i in range(5):\n    if i == 2:\n        continue\n    print(i) \n# Output: 0 1 3 4\n\nPython CodeOutput\n\n\n\n\n\n\n\n\n\nPass Statement\nThe pass statement is a placeholder that does nothing and is used when a statement is syntactically required but no action is needed.\n\nExample: Program to print all the whole numbers in the range 5 except 3.\n\nfor i in range(5):\n    if i == 3:\n        pass  # Placeholder for future code\n    else:\n        print(i)\n# Output: 0 1 2 4\n\nPython CodeOutput\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nCautions When Using Control Flow Structures\n\n\nControl flow structures are essential in Python programming for directing the flow of execution. However, improper use of these structures can lead to errors, inefficiencies, and unintended behaviors. Here are some cautions to keep in mind:\nInfinite Loops\n\nIssue: A while loop with a condition that never becomes False can lead to an infinite loop, which will cause the program to hang or become unresponsive.\nCaution: Always ensure that the condition in a while loop will eventually become False, and include logic within the loop to modify the condition.\n\nExample:\n# Infinite loop example\ncount = 0\nwhile count &lt; 5:\n    print(count)\n    # Missing count increment, causing an infinite loop\n\n\n\n\n\nFunctions in Python Programming\nFunctions are a fundamental concept in Python programming that enable code reuse, modularity, and organization. They allow us to encapsulate a block of code that performs a specific task, which can be executed whenever needed. Functions are essential for writing clean, maintainable, and scalable code, making them a cornerstone of effective programming practices.\nWhat is a Function?\nA function is a named block of code designed to perform a specific task. Functions can take inputs, called parameters or arguments, and can return outputs, which are the results of the computation or task performed by the function. By defining functions, we can write code once and reuse it multiple times, which enhances both efficiency and readability.\nDefining a Function\nIn Python, functions are defined using the def keyword, followed by the function name, parentheses containing any parameters, and a colon. The function body, which contains the code to be executed, is indented below the function definition.\n\nSyntax:\n\ndef function_name(parameters):\n    # Code block\n    return result\n\nExample:\n\ndef greet(name):\n    \"\"\"\n    Returns a greeting message for the given name.\n    \"\"\"\n    return f\"Hello, {name}!\"\n\nPython CodeOutput\n\n\n\n\n\n\n\n\n\nRelevance of functions in Programming\n\nCode Reusability : Functions allow us to define a piece of code once and reuse it in multiple places. This reduces redundancy and helps maintain consistency across our codebase.\nModularity : Functions break down complex problems into smaller, manageable pieces. Each function can be focused on a specific task, making it easier to understand and maintain the code.\nAbstraction : Functions enable us to abstract away the implementation details. We can use a function without needing to know its internal workings, which simplifies the code we write and enhances readability.\nTesting and Debugging : Functions allow us to test individual components of our code separately. This isolation helps in identifying and fixing bugs more efficiently.\nLibrary Creation : Functions are the building blocks of libraries and modules. By organizing related functions into libraries, we can create reusable components that can be shared and utilized across different projects.\n\n\nExample: Creating a Simple Library\n\nStage 1: Define Functions in a Module\n# my_library.py\n\ndef add(a, b):\n    \"\"\"\n    Returns the sum of two numbers.\n    \"\"\"\n    return a + b\n\ndef multiply(a, b):\n    \"\"\"\n    Returns the product of two numbers.\n    \"\"\"\n    return a * b\nStage 2: Use the Library in Another Program\n# main.py\n\nimport my_library\n\nresult_sum = my_library.add(5, 3)\nresult_product = my_library.multiply(5, 3)\n\nprint(f\"Sum: {result_sum}\")\nprint(f\"Product: {result_product}\")"
  },
  {
    "objectID": "Instructional_design/slides-quarto.html#control-structures-in-python",
    "href": "Instructional_design/slides-quarto.html#control-structures-in-python",
    "title": "Instructional Design for Python Programming",
    "section": "Control Structures in Python",
    "text": "Control Structures in Python\nControl structures in Python allow us to control the flow of execution in our programs. They help manage decision-making, looping, and the execution of code blocks based on certain conditions. Python provides several key control structures: if statements, for loops, while loops, and control flow statements like break, continue, and pass.\nConditional Statements\nConditional statements are used to execute code based on certain conditions. The primary conditional statement in Python is the if statement, which can be combined with elif and else to handle multiple conditions.\n\nSyntax:\n\nif condition:\n    # Code block to execute if condition is True\nelif another_condition:\n    # Code block to execute if another_condition is True\nelse:\n    # Code block to execute if none of the above conditions are True\n\nExample: Program to classify a person based on his/her age.\n\nage = 20\n\nif age &lt; 18:\n    print(\"us are a minor.\")\nelif age &lt; 65:\n    print(\"us are an adult.\")\nelse:\n    print(\"us are a senior citizen.\")\n\nPython CodeOutput\n\n\n\n\n\n\n\n\n\nLooping Statements\nLooping statements are used to repeat a block of code multiple times. Python supports for loops and while loops.\nFor Loop\nThe for loop iterates over a sequence (like a list, tuple, or string) and executes a block of code for each item in the sequence.\n\nSyntax:\n\nfor item in sequence:\n    # Code block to execute for each item\n\nExample: Program to print names of fruits saved in a list.\n\n# Iterating over a list\nfruits = [\"apple\", \"banana\", \"cherry\"]\nfor fruit in fruits:\n    print(fruit)\n\nPython CodeOutput\n\n\n\n\n\n\n\n\n\nWhile Loop\nThe while loop repeatedly executes a block of code as long as a specified condition is True.\n\nSyntax:\n\nwhile condition:\n    # Code block to execute while condition is True\n\nExample: Print all counting numbers less than 5.\n\n# Counting from 0 to 4\ncount = 0\nwhile count &lt; 5:\n    print(count)\n    count += 1\n\nPython CodeOutput\n\n\n\n\n\n\n\n\n\nControl Flow Statements\nControl flow statements alter the flow of execution within loops and conditionals.\nBreak Statement\nThe break statement exits the current loop, regardless of the loop’s condition.\n\nExample: Program to exit from the printing of whole numbers less than 10, while trigger 5.\n\nfor i in range(10):\n    if i == 5:\n        break\n    print(i)\n# Output: 0 1 2 3 4\n\nPython CodeOutput\n\n\n\n\n\n\n\n\n\nContinue Statement\nThe continue statement skips the rest of the code inside the current loop iteration and proceeds to the next iteration.\n\nExample: Program to print all the whole numbers in the range 5 except 2.\n\nfor i in range(5):\n    if i == 2:\n        continue\n    print(i) \n# Output: 0 1 3 4\n\nPython CodeOutput\n\n\n\n\n\n\n\n\n\nPass Statement\nThe pass statement is a placeholder that does nothing and is used when a statement is syntactically required but no action is needed.\n\nExample: Program to print all the whole numbers in the range 5 except 3.\n\nfor i in range(5):\n    if i == 3:\n        pass  # Placeholder for future code\n    else:\n        print(i)\n# Output: 0 1 2 4\n\nPython CodeOutput\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nCautions When Using Control Flow Structures\n\n\nControl flow structures are essential in Python programming for directing the flow of execution. However, improper use of these structures can lead to errors, inefficiencies, and unintended behaviors. Here are some cautions to keep in mind:\nInfinite Loops\n\nIssue: A while loop with a condition that never becomes False can lead to an infinite loop, which will cause the program to hang or become unresponsive.\nCaution: Always ensure that the condition in a while loop will eventually become False, and include logic within the loop to modify the condition.\n\nExample:\n# Infinite loop example\ncount = 0\nwhile count &lt; 5:\n    print(count)\n    # Missing count increment, causing an infinite loop"
  },
  {
    "objectID": "Instructional_design/slides-quarto.html#functions-in-python-programming",
    "href": "Instructional_design/slides-quarto.html#functions-in-python-programming",
    "title": "Instructional Design for Python Programming",
    "section": "Functions in Python Programming",
    "text": "Functions in Python Programming\nFunctions are a fundamental concept in Python programming that enable code reuse, modularity, and organization. They allow us to encapsulate a block of code that performs a specific task, which can be executed whenever needed. Functions are essential for writing clean, maintainable, and scalable code, making them a cornerstone of effective programming practices.\nWhat is a Function?\nA function is a named block of code designed to perform a specific task. Functions can take inputs, called parameters or arguments, and can return outputs, which are the results of the computation or task performed by the function. By defining functions, we can write code once and reuse it multiple times, which enhances both efficiency and readability.\nDefining a Function\nIn Python, functions are defined using the def keyword, followed by the function name, parentheses containing any parameters, and a colon. The function body, which contains the code to be executed, is indented below the function definition.\n\nSyntax:\n\ndef function_name(parameters):\n    # Code block\n    return result\n\nExample:\n\ndef greet(name):\n    \"\"\"\n    Returns a greeting message for the given name.\n    \"\"\"\n    return f\"Hello, {name}!\"\n\nPython CodeOutput\n\n\n\n\n\n\n\n\n\nRelevance of functions in Programming\n\nCode Reusability : Functions allow us to define a piece of code once and reuse it in multiple places. This reduces redundancy and helps maintain consistency across our codebase.\nModularity : Functions break down complex problems into smaller, manageable pieces. Each function can be focused on a specific task, making it easier to understand and maintain the code.\nAbstraction : Functions enable us to abstract away the implementation details. We can use a function without needing to know its internal workings, which simplifies the code we write and enhances readability.\nTesting and Debugging : Functions allow us to test individual components of our code separately. This isolation helps in identifying and fixing bugs more efficiently.\nLibrary Creation : Functions are the building blocks of libraries and modules. By organizing related functions into libraries, we can create reusable components that can be shared and utilized across different projects.\n\n\nExample: Creating a Simple Library\n\nStage 1: Define Functions in a Module\n# my_library.py\n\ndef add(a, b):\n    \"\"\"\n    Returns the sum of two numbers.\n    \"\"\"\n    return a + b\n\ndef multiply(a, b):\n    \"\"\"\n    Returns the product of two numbers.\n    \"\"\"\n    return a * b\nStage 2: Use the Library in Another Program\n# main.py\n\nimport my_library\n\nresult_sum = my_library.add(5, 3)\nresult_product = my_library.multiply(5, 3)\n\nprint(f\"Sum: {result_sum}\")\nprint(f\"Product: {result_product}\")"
  },
  {
    "objectID": "Instructional_design/Instru_design.html",
    "href": "Instructional_design/Instru_design.html",
    "title": "Instructional Design for Python Programming",
    "section": "",
    "text": "Instructional design is a systematic process used to create educational experiences and materials that effectively facilitate learning and improve student outcomes. It involves analyzing learners’ needs, defining clear objectives, structuring content, and selecting appropriate teaching methods and resources to achieve those objectives. Unlike a syllabus, which outlines the topics and schedule of a course, instructional design focuses on the pedagogical approach, instructional strategies, and assessment methods to ensure that the content is delivered in a way that maximizes learning.\nWhile the syllabus provides a roadmap of what will be taught, instructional design details the “how” and “why” of teaching each component, aiming to create a coherent and engaging learning experience. This process ensures that the course not only covers the necessary material but also aligns with educational goals and effectively supports students in achieving them. Then What is Instructional Design?. Watch the following video to get a clear understanding."
  },
  {
    "objectID": "Instructional_design/Instru_design.html#introduction",
    "href": "Instructional_design/Instru_design.html#introduction",
    "title": "Instructional Design for Python Programming",
    "section": "",
    "text": "Instructional design is a systematic process used to create educational experiences and materials that effectively facilitate learning and improve student outcomes. It involves analyzing learners’ needs, defining clear objectives, structuring content, and selecting appropriate teaching methods and resources to achieve those objectives. Unlike a syllabus, which outlines the topics and schedule of a course, instructional design focuses on the pedagogical approach, instructional strategies, and assessment methods to ensure that the content is delivered in a way that maximizes learning.\nWhile the syllabus provides a roadmap of what will be taught, instructional design details the “how” and “why” of teaching each component, aiming to create a coherent and engaging learning experience. This process ensures that the course not only covers the necessary material but also aligns with educational goals and effectively supports students in achieving them. Then What is Instructional Design?. Watch the following video to get a clear understanding."
  },
  {
    "objectID": "Instructional_design/Instru_design.html#course-title-python-programming-for-algorithmic-thinking",
    "href": "Instructional_design/Instru_design.html#course-title-python-programming-for-algorithmic-thinking",
    "title": "Instructional Design for Python Programming",
    "section": "Course Title: Python Programming (for Algorithmic Thinking)",
    "text": "Course Title: Python Programming (for Algorithmic Thinking)\n\n\n\n\n\n\nCourse Description:\n\n\n\nThis lab-based one credit course introduces algorithmic thinking through Python programming. Designed for engineers, it covers fundamental programming concepts and their application to real-world problems. The course emphasizes the development of algorithms and their implementation in Python, preparing students to approach problem-solving methodically."
  },
  {
    "objectID": "Instructional_design/Instru_design.html#course-objectives",
    "href": "Instructional_design/Instru_design.html#course-objectives",
    "title": "Instructional Design for Python Programming",
    "section": "Course Objectives",
    "text": "Course Objectives\nThe course objectives for “Python Programming for Algorithmic Thinking” are designed to provide immediate, actionable goals that students are expected to achieve through successful execution of the course sessions. Each objective is directly aligned with hands-on lab exercises and practical coding tasks, ensuring that students gain relevant skills that are immediately applicable. The focus on these specific objectives not only prepares students to tackle fundamental programming challenges but also builds a strong foundation for advanced coursework and professional engineering tasks.\nThe course objecives are:\n\nCharacterize and Identify Computer Components:\n\nUnderstand and describe the functional units and components of a computer system, including hardware, software, and language translators.\n\nDevelop Proficiency in Python Programming:\n\nGain the ability to code, test, and debug simple Python programs, demonstrating proficiency in basic programming concepts and practices.\n\nImplement Control Structures:\n\nApply branching and looping statements in Python to develop programs that solve problems through conditional logic and repetitive tasks.\n\nUtilize Python Data Structures:\n\nEffectively use supported data structures such as lists, dictionaries, and tuples to organize and manage data in Python programs."
  },
  {
    "objectID": "Instructional_design/Instru_design.html#course-outcomes",
    "href": "Instructional_design/Instru_design.html#course-outcomes",
    "title": "Instructional Design for Python Programming",
    "section": "Course Outcomes",
    "text": "Course Outcomes\nThe course outcomes represent measurable deliverables that students will gain upon completing the course. They are designed to be immediately applicable in subsequent courses and professional settings, ensuring that graduates are well-prepared for both advanced studies and real-world engineering challenges.\nCourse outcomes of ‘Python Programming’ are:\nAfter the successful completion of the course, the graduate will be able to:\n\nDesign and Implement Algorithms:\n\nDevelop, analyze, and apply algorithms to solve a variety of computational problems using Python.\n\nProgram Efficiently in Python:\n\nWrite, debug, and optimize Python code, utilizing core programming constructs and data structures effectively.\n\nApply Data Structures and Functions:\n\nUse Python’s data structures, such as lists, tuples, and dictionaries, and modularize code with functions for efficient problem-solving.\n\nUtilize Development Tools:\n\nLeverage development tools like GitHub and Raptor for effective coding, documentation, and algorithm visualization."
  },
  {
    "objectID": "Instructional_design/Instru_design.html#course-introduction",
    "href": "Instructional_design/Instru_design.html#course-introduction",
    "title": "Instructional Design for Python Programming",
    "section": "Course Introduction",
    "text": "Course Introduction\n\nTo introduce the “Python Programming for Algorithmic Thinking” course to students from various branches, begin by explaining the universal relevance of algorithmic thinking in everyday problem-solving. Use a simple context, such as organizing a group project: just as you would plan tasks and delegate responsibilities to ensure the project is completed efficiently and effectively, algorithmic thinking involves creating systematic methods to solve problems. A block diagram representing this example is given below.\n\n\n\n\n\n\ngraph TD\n    A[Start Project] --&gt; B[Identify Objectives]\n    B --&gt; C[Break Down Tasks]\n    C --&gt; D[Assign Responsibilities]\n    D --&gt; E[Set Deadlines]\n    E --&gt; F[Execute Tasks]\n    F --&gt; G[Monitor Progress]\n    G --&gt; H[Review and Adjust]\n    H --&gt; I[Complete Project]\n    I --&gt; J[Project Successful]\n\n    style A fill:#f9f,stroke:#333,stroke-width:2px,color:#000;\n    style B fill:#ccf,stroke:#333,stroke-width:2px,color:#000;\n    style C fill:#ccf,stroke:#333,stroke-width:2px,color:#000;\n    style D fill:#ccf,stroke:#333,stroke-width:2px,color:#000;\n    style E fill:#ccf,stroke:#333,stroke-width:2px,color:#000;\n    style F fill:#ccf,stroke:#333,stroke-width:2px,color:#000;\n    style G fill:#ccf,stroke:#333,stroke-width:2px,color:#000;\n    style H fill:#ccf,stroke:#333,stroke-width:2px,color:#000;\n    style I fill:#ccf,stroke:#333,stroke-width:2px,color:#000;\n    style J fill:#cfc,stroke:#333,stroke-width:2px,color:#000;\n\n\n\n\nFigure 1: State diagram to successfully finish a project.\n\n\n\n\n\nEmphasize that the (the algorithmic thinking) skills learned will be valuable across all engineering disciplines, enhancing their problem-solving capabilities and preparing them for complex challenges in their academic and professional careers. This approach will help students appreciate the broad applicability of the course content and encourage active participation."
  },
  {
    "objectID": "Instructional_design/Instru_design.html#a-seven-in-one-problem",
    "href": "Instructional_design/Instru_design.html#a-seven-in-one-problem",
    "title": "Instructional Design for Python Programming",
    "section": "A Seven-in-One Problem!",
    "text": "A Seven-in-One Problem!\nIn this context, we will explore how algorithmic thinking can be applied across different engineering branches using a common example. Each branch of engineering plays a critical role in developing and implementing this system, demonstrating the relevance and application of algorithms in diverse fields. Let us formulate the context and problem statement as follows.\n\n\n\n\n\n\nContext:\n\n\n\nA city wants to implement a smart traffic management system to improve traffic flow and reduce congestion at intersections. The system will use sensors and data analysis to control traffic lights dynamically.\n\n\n\n\n\n\n\n\nProblem:\n\n\n\nDesign an algorithm to manage traffic lights at a busy intersection based on real-time traffic data from sensors. The goal is to optimize traffic flow and minimize waiting times for vehicles.\n\n\n\nSteps for Algorithmic Thinking:"
  },
  {
    "objectID": "Instructional_design/Instru_design.html#civil-engineering",
    "href": "Instructional_design/Instru_design.html#civil-engineering",
    "title": "Instructional Design for Python Programming",
    "section": "1. Civil Engineering",
    "text": "1. Civil Engineering\n\nProblem: Design the layout of the intersection to ensure efficient traffic flow.\nAlgorithm: Develop an algorithm to determine optimal road layouts and signal timings based on traffic volume and road capacity.\n\nThe block diagram is shown in Fig- 2\n\n\n\n\n\n\ngraph TD\n    A[Design Intersection Layout] --&gt; B[Analyze Traffic Volume]\n    B --&gt; C[Determine Optimal Signal Timings]\n    C --&gt; D[Implement Traffic Light Control]\n    D --&gt; E[Monitor Traffic Flow]\n    E --&gt; F[Adjust Layout Based on Data]\n\n    style A fill:#f9f,stroke:#333,stroke-width:2px,color:#000;\n    style B fill:#ccf,stroke:#333,stroke-width:2px,color:#000;\n    style C fill:#ccf,stroke:#333,stroke-width:2px,color:#000;\n    style D fill:#ccf,stroke:#333,stroke-width:2px,color:#000;\n    style E fill:#ccf,stroke:#333,stroke-width:2px,color:#000;\n    style F fill:#cfc,stroke:#333,stroke-width:2px,color:#000;\n\n\n\n\nFigure 2: State diagram for Civil Engineering Tribe."
  },
  {
    "objectID": "Instructional_design/Instru_design.html#mechanical-engineering",
    "href": "Instructional_design/Instru_design.html#mechanical-engineering",
    "title": "Instructional Design for Python Programming",
    "section": "2. Mechanical Engineering:",
    "text": "2. Mechanical Engineering:\n\nProblem: Create a mechanism for automated traffic lights that can withstand varying weather conditions.\nAlgorithm: Develop an algorithm to control the mechanical parts of traffic lights and adjust for environmental factors.\n\nThe block diagram is shown in Fig- 3\n\n\n\n\n\n\ngraph TD\n    A[Design Traffic Light Mechanism] --&gt; B[Select Durable Materials]\n    B --&gt; C[Create Weather-Resistant Design]\n    C --&gt; D[Develop Control Mechanism]\n    D --&gt; E[Automate Traffic Light Adjustments]\n    E --&gt; F[Test Mechanism for Reliability]\n\n    style A fill:#f9f,stroke:#333,stroke-width:2px,color:#000;\n    style B fill:#ccf,stroke:#333,stroke-width:2px,color:#000;\n    style C fill:#ccf,stroke:#333,stroke-width:2px,color:#000;\n    style D fill:#ccf,stroke:#333,stroke-width:2px,color:#000;\n    style E fill:#ccf,stroke:#333,stroke-width:2px,color:#000;\n    style F fill:#cfc,stroke:#333,stroke-width:2px,color:#000;\n\n\n\n\nFigure 3: State diagram for Mechanical Engineering Tribe."
  },
  {
    "objectID": "Instructional_design/Instru_design.html#chemical-engineering",
    "href": "Instructional_design/Instru_design.html#chemical-engineering",
    "title": "Instructional Design for Python Programming",
    "section": "3. Chemical Engineering:",
    "text": "3. Chemical Engineering:\n\nProblem: Design materials for road signs and sensors that are durable and effective.\nAlgorithm: Develop an algorithm to evaluate and select materials based on their chemical properties and environmental impact.\n\nThe block diagram is shown in Fig- 4\n\n\n\n\n\n\ngraph TD\n    A[Design Road Signs and Sensors] --&gt; B[Evaluate Material Properties]\n    B --&gt; C[Select Chemical-Resistant Materials]\n    C --&gt; D[Ensure Environmental Impact]\n    D --&gt; E[Test Durability]\n    E --&gt; F[Implement in Traffic System]\n\n    style A fill:#f9f,stroke:#333,stroke-width:2px,color:#000;\n    style B fill:#ccf,stroke:#333,stroke-width:2px,color:#000;\n    style C fill:#ccf,stroke:#333,stroke-width:2px,color:#000;\n    style D fill:#ccf,stroke:#333,stroke-width:2px,color:#000;\n    style E fill:#ccf,stroke:#333,stroke-width:2px,color:#000;\n    style F fill:#cfc,stroke:#333,stroke-width:2px,color:#000;\n\n\n\n\nFigure 4: State diagram for Chemical Engineering Tribe."
  },
  {
    "objectID": "Instructional_design/Instru_design.html#food-technology",
    "href": "Instructional_design/Instru_design.html#food-technology",
    "title": "Instructional Design for Python Programming",
    "section": "4. Food Technology:",
    "text": "4. Food Technology:\n\nProblem: Ensure that traffic management systems in areas with food distribution centers do not disrupt deliveries.\nAlgorithm: Create an algorithm to prioritize traffic flow for delivery vehicles during peak hours to avoid delays.\n\nThe block diagram is shown in Fig- 5\n\n\n\n\n\n\ngraph TD\n    A[Assess Impact on Delivery Routes] --&gt; B[Prioritize Delivery Vehicles]\n    B --&gt; C[Design Traffic Light Scheduling]\n    C --&gt; D[Implement Scheduling in System]\n    D --&gt; E[Monitor Delivery Efficiency]\n    E --&gt; F[Adjust Based on Feedback]\n\n    style A fill:#f9f,stroke:#333,stroke-width:2px,color:#000;\n    style B fill:#ccf,stroke:#333,stroke-width:2px,color:#000;\n    style C fill:#ccf,stroke:#333,stroke-width:2px,color:#000;\n    style D fill:#ccf,stroke:#333,stroke-width:2px,color:#000;\n    style E fill:#ccf,stroke:#333,stroke-width:2px,color:#000;\n    style F fill:#cfc,stroke:#333,stroke-width:2px,color:#000;\n\n\n\n\nFigure 5: State diagram for Food Engineering Tribe."
  },
  {
    "objectID": "Instructional_design/Instru_design.html#electronics-and-communication",
    "href": "Instructional_design/Instru_design.html#electronics-and-communication",
    "title": "Instructional Design for Python Programming",
    "section": "5. Electronics and Communication:",
    "text": "5. Electronics and Communication:\n\nProblem: Implement sensor networks and communication systems for data collection and signal control.\nAlgorithm: Develop algorithms for data transmission, sensor data integration, and communication between traffic lights and control systems.\n\nThe block diagram is shown in Fig- 6\n\n\n\n\n\n\ngraph TD\n    A[Implement Sensor Network] --&gt; B[Design Data Transmission System]\n    B --&gt; C[Integrate Sensors with Traffic Lights]\n    C --&gt; D[Develop Communication Protocols]\n    D --&gt; E[Ensure Reliable Data Transfer]\n    E --&gt; F[Optimize Communication System]\n\n    style A fill:#f9f,stroke:#333,stroke-width:2px,color:#000;\n    style B fill:#ccf,stroke:#333,stroke-width:2px,color:#000;\n    style C fill:#ccf,stroke:#333,stroke-width:2px,color:#000;\n    style D fill:#ccf,stroke:#333,stroke-width:2px,color:#000;\n    style E fill:#ccf,stroke:#333,stroke-width:2px,color:#000;\n    style F fill:#cfc,stroke:#333,stroke-width:2px,color:#000;\n\n\n\n\nFigure 6: State diagram for Electronics and Communication Engineering Tribe."
  },
  {
    "objectID": "Instructional_design/Instru_design.html#robotics-and-automation",
    "href": "Instructional_design/Instru_design.html#robotics-and-automation",
    "title": "Instructional Design for Python Programming",
    "section": "6. Robotics and Automation:",
    "text": "6. Robotics and Automation:\n\nProblem: Automate the adjustment of traffic lights based on real-time data.\nAlgorithm: Design an algorithm to control automated systems that adjust traffic lights dynamically based on sensor data and predefined rules.\n\nThe block diagram is shown in Fig- 7\n\n\n\n\n\n\ngraph TD\n    A[Develop Automation System] --&gt; B[Create Real-Time Adjustment Algorithms]\n    B --&gt; C[Integrate with Traffic Lights]\n    C --&gt; D[Test for Dynamic Control]\n    D --&gt; E[Optimize Automation for Traffic Flow]\n    E --&gt; F[Monitor and Refine System]\n\n    style A fill:#f9f,stroke:#333,stroke-width:2px,color:#000;\n    style B fill:#ccf,stroke:#333,stroke-width:2px,color:#000;\n    style C fill:#ccf,stroke:#333,stroke-width:2px,color:#000;\n    style D fill:#ccf,stroke:#333,stroke-width:2px,color:#000;\n    style E fill:#ccf,stroke:#333,stroke-width:2px,color:#000;\n    style F fill:#cfc,stroke:#333,stroke-width:2px,color:#000;\n\n\n\n\nFigure 7: State diagram for Robotics Tribe."
  },
  {
    "objectID": "Instructional_design/Instru_design.html#computer-science",
    "href": "Instructional_design/Instru_design.html#computer-science",
    "title": "Instructional Design for Python Programming",
    "section": "7. Computer Science:",
    "text": "7. Computer Science:\n\nProblem: Create a software system to process traffic data and control traffic lights.\nAlgorithm: Develop a software algorithm that processes data from traffic sensors, makes real-time decisions on traffic light timings, and adjusts signals to optimize traffic flow.\n\nThe block diagram is shown in Fig- 8\n\n\n\n\n\n\ngraph TD\n    A[Develop Software System] --&gt; B[Process Traffic Data]\n    B --&gt; C[Implement Decision-Making Algorithms]\n    C --&gt; D[Control Traffic Lights Based on Data]\n    D --&gt; E[Test and Debug System]\n    E --&gt; F[Deploy and Monitor System]\n\n    style A fill:#f9f,stroke:#333,stroke-width:2px,color:#000;\n    style B fill:#ccf,stroke:#333,stroke-width:2px,color:#000;\n    style C fill:#ccf,stroke:#333,stroke-width:2px,color:#000;\n    style D fill:#ccf,stroke:#333,stroke-width:2px,color:#000;\n    style E fill:#ccf,stroke:#333,stroke-width:2px,color:#000;\n    style F fill:#cfc,stroke:#333,stroke-width:2px,color:#000;\n\n\n\n\nFigure 8: State diagram for Computer Science Tribe."
  },
  {
    "objectID": "Instructional_design/Instru_design.html#expected-partial-outcome",
    "href": "Instructional_design/Instru_design.html#expected-partial-outcome",
    "title": "Instructional Design for Python Programming",
    "section": "Expected Partial Outcome",
    "text": "Expected Partial Outcome\nBy designing and implementing algorithms for this traffic management system, engineers from various branches contribute to creating a more efficient and responsive traffic control system. Each branch applies algorithmic thinking to address specific aspects of the problem, demonstrating the relevance and application of algorithms in real-world scenarios.\n\n\n\n\n\n\nKey Takeaway\n\n\n\nBy engaging with the various engineering contexts illustrated through algorithmic thinking, students will gain a deeper appreciation for how structured problem-solving can lead to better planning, efficient design, and successful execution in real-world scenarios. Algorithmic thinking is not just about writing code but about systematically breaking down complex challenges into manageable steps, which is crucial for effective engineering solutions. Understanding and applying this approach will empower students to tackle problems more efficiently, optimize processes, and enhance their ability to innovate across different engineering disciplines.\n\n\n\nWait a second…\nFriends, do you ever think this instructional design might seem impractical? Let me challenge that idea. Time can feel like a stubborn illusion, but have you ever wondered how your students really perceive it? Imagine seeing their experience from their perspective. Do they feel confined by the rigid structures we often impose, or do they crave a more dynamic approach? By understanding how they truly think and engage with our sessions, we might find that what seems impractical to us could actually be exactly what they need to thrive. Let’s open our minds to how changing our approach can make a real difference in their learning experience. Just watch the following video.\n\nThe next session will focus on translating the conceptual framework of algorithmic thinking into a computational framework. This transition will involve exploring the fundamental components and functions of computer systems, which are essential for implementing algorithms in a practical programming environment."
  },
  {
    "objectID": "Instructional_design/Instru_design.html#conceptual-to-computational",
    "href": "Instructional_design/Instru_design.html#conceptual-to-computational",
    "title": "Instructional Design for Python Programming",
    "section": "Conceptual to Computational",
    "text": "Conceptual to Computational\nAlgorithmic thinking offers a robust conceptual framework for addressing complex problems through systematic decomposition into manageable steps. This method allows for effective planning, design, and implementation of solutions. However, transitioning from conceptual frameworks to practical applications necessitates a foundational understanding of computer systems.\nTo effectively translate algorithmic concepts into computational implementations, it is essential to grasp how computer systems operate. Knowledge of computer architecture, software types, and various programming tools is crucial for converting algorithms into executable programs and optimizing these solutions.\nThis course will introduce the basic components and functions of computer systems, including hardware, software, and programming environments. This foundational understanding will bridge the gap between theoretical algorithmic thinking and practical computational implementation, facilitating the effective application of algorithms in programming tasks.\n\nFamiliarization of Computer System, Editors, Various Language Translators\nKnowledge of computer architecture, including the roles of input/output devices, memory, and various types of software, enables programmers to write more efficient and effective code. This understanding helps in debugging, optimizing performance, and leveraging system resources effectively. By grasping how language translators like compilers, interpreters, and assemblers work, programmers can better appreciate how their code is transformed into executable instructions and troubleshoot issues with greater precision.\n\n\n\n\n\n\nThe poetry of programming\n\n\n\nTo showcase how the new generation views and engages with technology, we can draw inspiration from Linda Liukas’ TEDx talk. In her presentation, Liukas passionately argues that a significant movement in technology is underway, emphasizing the need for inclusive and diverse participation, especially from younger generations. Her vision of technology, framed as the “poetry of code,” highlights how creativity and diversity can shape a more vibrant and innovative tech landscape. By including her TEDx video, we can provide a compelling testimonial that illustrates how the next generation perceives and interacts with technology, reinforcing the importance of adapting our instructional designs to better connect with their perspectives and aspirations.\n\n\n\n\nIntroduction to Computer Architecture\n1. Block Diagram of Computer: The block diagram of a computer provides a visual representation of its major components and their interconnections. It typically includes the Central Processing Unit (CPU), Memory, Input Devices, Output Devices, and Storage Units. This diagram helps in understanding the flow of data and control signals within the computer system. A sample block diagram is shown in Fig- 9.\n\n\n\n\n\n\nFigure 9: Block Diagram of a Computer\n\n\n\n2. Hardware: Hardware refers to the physical components of a computer system. It includes the CPU, motherboard, RAM, hard drives, input devices (such as keyboards and mice), output devices (such as monitors and printers), and peripheral devices. Understanding hardware is crucial for comprehending how software interacts with physical components to perform tasks.\n3. Input and Output Devices: - Input Devices: These are devices used to enter data into a computer. Common examples include keyboards, mice, scanners, and microphones. - Output Devices: These devices display or output data from the computer. Examples include monitors, printers, and speakers.\n4. Memory: Memory in a computer system is used to store data and instructions. It includes: - Primary Memory (RAM): Volatile memory that temporarily holds data and instructions currently in use. - Secondary Memory (Storage): Non-volatile memory used for long-term data storage, such as hard drives and SSDs.\n\n\nSoftware\n1. Types of Software: - System Software: Includes operating systems (e.g., Windows, macOS, Linux) that manage hardware resources and provide a platform for running applications. - Application Software: Programs designed for end-users to perform specific tasks, such as word processors, web browsers, and games.\n2. High-Level Languages: High-level programming languages are designed to be easy for humans to read and write. Examples include Python, Java, and C++. They are used to write programs that are compiled or interpreted into machine code.\n3. Low-Level Languages: Low-level languages are closer to machine code and provide less abstraction from the hardware. Examples include assembly language, which is specific to a particular computer architecture and provides a symbolic representation of machine instructions.\n4. Assembly Languages: Assembly language is a low-level programming language that uses symbolic names for instructions and data. It is specific to a computer architecture and is used to write programs that interact directly with hardware.\n\n\nLanguage Translators\n1. Compiler: A compiler is a program that translates high-level source code into machine code or intermediate code that can be executed by the computer. It performs syntax checking, optimization, and generates executable files.\n2. Interpreter: An interpreter translates high-level source code into machine code line-by-line or statement-by-statement at runtime. It does not produce an executable file but directly executes the instructions. Examples include Python interpreters.\n3. Assembler: An assembler translates assembly language code into machine code. It converts symbolic instructions into binary instructions that the computer’s CPU can execute.\n\n\n\n\n\n\nNeed and Significance of Technical Know-how on Computer System\n\n\n\nUnderstanding the fundamentals of computer systems, including hardware components, software types, and language translators, is crucial for engineers as they move from conceptual ideas to practical, computer-based solutions. Familiarity with computer architecture helps engineers grasp how different hardware elements interact and how data flows through the system. Knowledge of software types and language translators enables engineers to select appropriate programming tools and languages for implementing their algorithms efficiently.\n\n\nBefore delving into the development of algorithms and flow charts, it is essential to understand the fundamental concepts of the computer system, as they provide the groundwork for translating conceptual ideas into computational solutions. The knowledge of computer architecture, memory, and software helps in effectively implementing and visualizing algorithms within a computer system.\nWith this foundational understanding in place, the focus shifts to developing algorithms and flow charts, which are designed with specific structures to facilitate standardization."
  },
  {
    "objectID": "Instructional_design/Instru_design.html#developing-algorithms-and-flow-charts",
    "href": "Instructional_design/Instru_design.html#developing-algorithms-and-flow-charts",
    "title": "Instructional Design for Python Programming",
    "section": "Developing Algorithms and Flow Charts",
    "text": "Developing Algorithms and Flow Charts\nIn the computational framework, standardizing the step-by-step process of algorithmic thinking is crucial for ensuring consistency and clarity in program development.\n\nIntroduction to Algorithms\n1. What is an Algorithm?\nAn algorithm is a well-defined sequence of steps or instructions designed to perform a specific task or solve a particular problem. It serves as a blueprint for writing computer programs. Algorithms are essential for problem-solving as they provide a clear and systematic approach to achieving desired outcomes.\n2. Properties of a Good Algorithm\nA well-constructed algorithm possesses several key properties: - Finiteness: The algorithm must have a finite number of steps and should terminate after a certain number of operations. - Definiteness: Each step of the algorithm should be precisely defined and unambiguous. - Input: The algorithm should accept zero or more inputs, which are the data necessary for its execution. - Output: The algorithm should produce at least one output, which is the result or solution of the problem. - Effectiveness: Each step of the algorithm should be basic enough to be executed within a finite amount of time.\n\n\nIntroduction to Flow Charts\n1. What is a Flow Chart?\nA flow chart is a visual representation of an algorithm, using various symbols to denote different types of operations or steps. Flow charts help in understanding and communicating the logic of an algorithm more clearly by illustrating the flow of control and decision-making process.\n2. Key Symbols in Flow Charts\n\nOval: Represents the start and end points of the flow chart.\nRectangle: Indicates a process or action step.\nDiamond: Denotes a decision point, where branching occurs based on conditions.\nParallelogram: Used for input and output operations.\nArrow: Shows the direction of flow between steps.\n\n\n\n\n\n\n\nStandardizing Algorithmic Thinking\n\n\n\nIn the computational framework, algorithms and flow charts are designed with a specific structure to ensure that the problem-solving approach is standardized. This standardization helps in maintaining consistency in how algorithms are developed, communicated, and executed. By adhering to these standardized structures, engineers and programmers can more effectively design, analyze, and implement solutions, ensuring that the computational processes are efficient and reliable.\n\n\nIn the upcoming sessions, students will have the opportunity to explore more examples and apply the principles of algorithmic thinking and flowchart design to a variety of problems.\n\n\n1. Crossing a Traffic Signal\nProblem: Write the algorithm and flowchart for the program to determine whether a pedestrian can cross the road based on the traffic signal color.\nAlgorithm:\n\nStart\nObserve the traffic signal color\nIf the signal is green, “Cross the road”\nElse if the signal is yellow, “Wait”\nElse if the signal is red, “wait”\nEnd\n\nFlowchart: Flowchart for this program is shown in Fig- 10.\n\n\n\n\n\n\nflowchart TD\n    A((Start)) --&gt; B{Check traffic light color}\n    B -- Red --&gt; C[Wait]\n    B -- Yellow --&gt; D[Wait]\n    B -- Green --&gt; E[Cross the road]\n    C --&gt; B\n    D --&gt; B\n    E --&gt; F((Stop))\n    \n    %% Define styles\n    classDef startEnd fill:#ffffff,stroke:#000000,color:#000000;\n    classDef inputOutput fill:#f0f0f0,stroke:#000000,color:#000000;\n    classDef decision fill:#e0e0e0,stroke:#000000,color:#000000;\n    \n    %% Apply styles to nodes\n    class A,H startEnd;\n    class B,D,F,G inputOutput;\n    class C,E decision;\n\n\n\n\nFigure 10: Flowchart of the program to cross the trafic signal.\n\n\n\n\n\n\n\n2. Finding the Maximum of Two Numbers\nProblem: Write the algorithm and draw the flowchart for the program that takes two numbers as input and prints the larger of the two.\n\n\nAlgorithm:\n\nStart\nInput two numbers, A and B\nIf A is greater than B, print A\nOtherwise, print B\nEnd\n\n\n\nFlowchart\nFlowchart for this program is shown in Fig- 11.\n\n\n\n\n\n\nflowchart TD\n    A([Start]) --&gt; B[Input A and B]\n    B --&gt; C{Is A &gt; B?}\n    C -- Yes --&gt; D[Print A]\n    C -- No --&gt; E[Print B]\n    D --&gt; F([End])\n    E --&gt; F\n    \n    %% Define styles\n    classDef startEnd fill:#ffffff,stroke:#000000,color:#000000;\n    classDef inputOutput fill:#f0f0f0,stroke:#000000,color:#000000;\n    classDef decision fill:#e0e0e0,stroke:#000000,color:#000000;\n    \n    %% Apply styles to nodes\n    class A,F startEnd;\n    class B,D,E inputOutput;\n    class C decision;\n\n\n\n\nFigure 11: Flowchart of the program to find larger of two numbers.\n\n\n\n\n\n\n\n3. Finding the Largest of Three Numbers\nProblem: Write a program that takes three numbers as input and prints the largest of the three.\nAlgorithm:\n\nStart\nInput three numbers, A, B, and C\nIf A is greater than B and A is greater than C, print A\nElse if B is greater than A and B is greater than C, print B\nOtherwise, print C\nEnd\n\nFlowchart: Flowchart for this program is shown in Fig- 12.\n\n\n\n\n\n\nflowchart TD\n    A([Start]) --&gt; B[Input A, B, and C]\n    B --&gt; C{Is A &gt; B?}\n    C --&gt;|Yes| D{Is A &gt; C?}\n    C --&gt;|No| E{Is B &gt; C?}\n    D -- Yes --&gt; F[Print A]\n    D -- No --&gt; G[Print C]\n    E -- Yes --&gt; H[Print B]\n    E -- No --&gt; G\n    F --&gt; I([End])\n    H --&gt; I\n    G --&gt; I\n    \n    %% Define styles\n    classDef startEnd fill:#ffffff,stroke:#000000,color:#000000;\n    classDef inputOutput fill:#f0f0f0,stroke:#000000,color:#000000;\n    classDef decision fill:#e0e0e0,stroke:#000000,color:#000000;\n    \n    %% Apply styles to nodes\n    class A,I startEnd;\n    class B,F,H inputOutput;\n    class C,D,E decision;\n\n\n\n\nFigure 12: Flowchart of the program to find largest of three numbers.\n\n\n\n\n\n\n\n4. Class Joining Dilema\nProblem: Write the algorithm and draw the flowchart for the program to determine whether a student will join a class based on whether their favorite teacher and best friend are in the class.\nAlgorithm:\n\nStart\nObserve the presence of the favorite teacher\nObserve the presence of the best friend\nIf both the favorite teacher and the best friend are present, “Join the class”\nElse, “Do not join the class”\nEnd\n\nFlowchart: Flowchart for this program is shown in Fig- 13.\n\n\n\n\n\n\nflowchart TD\n    A([Start]) --&gt; B{Is favourite teacher in class?}\n    B -- Yes --&gt; C{Is best friend in class?}\n    C -- Yes --&gt; D[Joins class]\n    B -- No --&gt; E[Does not join class]\n    C -- No --&gt; E[Does not join class]\n    E --&gt; F([Stop])\n    %% Define styles\n    classDef startEnd fill:#ffffff,stroke:#000000,color:#000000;\n    classDef inputOutput fill:#f0f0f0,stroke:#000000,color:#000000;\n    classDef decision fill:#e0e0e0,stroke:#000000,color:#000000;\n    \n    %% Apply styles to nodes\n    class A,I startEnd;\n    class B,F,H inputOutput;\n    class C,D,E decision;\n\n\n\n\nFigure 13: Flowchart of the program to join the class"
  },
  {
    "objectID": "Instructional_design/Instru_design.html#transition-from-algorithmic-thinking-to-programming",
    "href": "Instructional_design/Instru_design.html#transition-from-algorithmic-thinking-to-programming",
    "title": "Instructional Design for Python Programming",
    "section": "Transition from Algorithmic Thinking to Programming",
    "text": "Transition from Algorithmic Thinking to Programming\nThe algorithmic thinking process involves breaking down a problem into a series of logical steps, as illustrated by our flowcharts. This conceptual framework is very important for defining clear, sequential instructions to solve a problem. However, to bring these concepts into a practical domain, we need to translate them into a programming language that can execute these instructions."
  },
  {
    "objectID": "Instructional_design/Instru_design.html#transition-from-algorithmic-thinking-to-programming-1",
    "href": "Instructional_design/Instru_design.html#transition-from-algorithmic-thinking-to-programming-1",
    "title": "Instructional Design for Python Programming",
    "section": "Transition from Algorithmic Thinking to Programming",
    "text": "Transition from Algorithmic Thinking to Programming\nAlgorithmic thinking involves deconstructing problems into logical, sequential steps, as demonstrated by our flowcharts. Converting these concepts into a practical programming language allows us to execute these steps effectively. Historically, high-level programming languages like C, C++, and Java have been instrumental in translating algorithms into executable code. Here’s a comparison of these languages with Python, highlighting why Python is particularly suitable for computational thinking in engineering. Advantages of Python over other popular programming languages is explained in the following video."
  },
  {
    "objectID": "Instructional_design/Instru_design.html#historical-context-and-comparison",
    "href": "Instructional_design/Instru_design.html#historical-context-and-comparison",
    "title": "Instructional Design for Python Programming",
    "section": "Historical Context and Comparison",
    "text": "Historical Context and Comparison\n\nC Language\nDeveloped in the early 1970s, C is one of the earliest high-level programming languages. It provides a foundation for many modern languages and is known for its performance and low-level memory manipulation capabilities. C requires explicit management of memory and pointers, which adds complexity to code. While powerful, it lacks some of the high-level abstractions and simplicity found in Python.\n\n\nC++ Language\nAn extension of C, C++ was developed in the early 1980s and introduced object-oriented programming features. It allows for complex data modeling and high-performance applications. C++ offers more control over system resources but at the cost of increased complexity. It involves managing object-oriented concepts and memory explicitly, which can be challenging for beginners.\n\n\nJava Language\nDeveloped in the mid-1990s, Java is known for its portability across platforms, thanks to the Java Virtual Machine (JVM). It emphasizes object-oriented programming and has extensive libraries. Java’s syntax is more verbose compared to Python. It requires managing class structures and access modifiers, which can make code less straightforward to write and read."
  },
  {
    "objectID": "Instructional_design/Instru_design.html#why-python-is-preferred-for-computational-thinking",
    "href": "Instructional_design/Instru_design.html#why-python-is-preferred-for-computational-thinking",
    "title": "Instructional Design for Python Programming",
    "section": "Why Python is Preferred for Computational Thinking?",
    "text": "Why Python is Preferred for Computational Thinking?\nPython, created by Guido van Rossum and first released in 1991, emerged from a desire to develop a language that was both easy to read and write, while also being powerful enough to handle complex tasks. It was inspired by the ABC language, which van Rossum had worked on during his time at Centrum Wiskunde & Informatica (CWI) in the Netherlands. Python’s base code was written in C, which provides a solid foundation for its extensive standard library and cross-platform capabilities. The language emphasizes readability and simplicity, featuring an elegant syntax that allows programmers to express concepts in fewer lines of code compared to many other languages. This design philosophy has contributed to Python’s widespread adoption across various fields, from web development to scientific computing and engineering. Popular features of Python programming language are:\n\n1. Readability and Simplicity\nPython’s syntax is designed to be clear and intuitive, resembling natural language. This simplicity allows engineers to focus on the logic of their algorithms without being bogged down by complex syntax. For computational thinking, where clarity and understanding are crucial, Python’s readability reduces cognitive load, making it easier to implement and debug algorithms.\n\n\n2. Versatility and Ease of Use\nPython supports multiple programming paradigms, including procedural, object-oriented, and functional programming. Its versatility makes it suitable for a wide range of applications, from simple scripts to complex systems. This adaptability is particularly useful in engineering, where problems often span different domains and require diverse approaches.\n\n\n3. Rich Libraries and Frameworks\nPython’s extensive standard library and third-party modules simplify many tasks. Libraries such as NumPy for numerical computations, pandas for data manipulation, and Matplotlib for visualization provide powerful tools for engineers. These libraries streamline the implementation of complex algorithms and data handling, making Python an efficient choice for solving engineering problems.\n\n\n\n\n\n\nVerdict\n\n\n\nThe historical languages like C, C++, and Java have their strengths, Python’s readability, versatility, and extensive libraries make it particularly well-suited for computational thinking in engineering. By transitioning from conceptual algorithmic thinking to practical Python programming, engineers can effectively apply and implement their problem-solving strategies in a straightforward and efficient manner.\n\n\nFuture sessions will delve into various Python examples, reinforcing the practical application of these concepts and preparing students for advanced problem-solving in their respective engineering fields.\n\n\nJust a second…\nProgramming extends beyond mere coding, which involves translating instructions into a form that computers can execute. While coding focuses on syntax and grammar, programming encompasses the entire process of solving problems, from understanding the problem and designing algorithms to implementing and testing solutions. This broader view highlights the importance of logical thinking, a skill central to effective programming. According to Lesli Lambort, “Programming is not just about writing code; it’s about creating solutions through a logical process.” This involves breaking down complex problems, understanding their components, and systematically building solutions. Just watch what Labort saying on this topic."
  },
  {
    "objectID": "Instructional_design/Instru_design.html#python-fundamentals",
    "href": "Instructional_design/Instru_design.html#python-fundamentals",
    "title": "Instructional Design for Python Programming",
    "section": "Python Fundamentals",
    "text": "Python Fundamentals\n\nPython Programming Overview\nPython is a high-level, interpreted programming language that was created by Guido van Rossum and first released in 1991. Its design philosophy emphasizes code readability and simplicity, making it an excellent choice for both beginners and experienced developers. Over the years, Python has undergone significant development and improvement, with major releases adding new features and optimizations. The language’s versatility and ease of use have made it popular in various domains, including web development, data science, artificial intelligence, scientific computing, automation, and more. Python’s extensive standard library and active community contribute to its widespread adoption, making it one of the most popular programming languages in the world today.\n\n\nVariables\nIn Python, variables are used to store data that can be used and manipulated throughout a program. Variables do not need explicit declaration to reserve memory space. The declaration happens automatically when a value is assigned to a variable.\nBasic Input/Output Functions\nPython provides built-in functions for basic input and output operations. The print() function is used to display output, while the input() function is used to take input from the user.\nOutput with print() function\n\nTemplateDIY\n\n\n# Printing text\nprint(\"Hello, World!\")\n\n# Printing multiple values\nx = 5\ny = 10\nprint(\"The value of x is:\", x, \"and the value of y is:\", y)\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\n\nExample 2\n\n\nTemplateDIY\n\n\n# Assigning values to variables\na = 10\nb = 20.5\nname = \"Alice\"\n\n# Printing the values\nprint(\"Values Stored in the Variables:\")\nprint(a)\nprint(b)\nprint(name)\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\nInput with input() Function:\n\nTemplateDIY\n\n\n# Taking input from the user\nname = input(\"Enter your name: \")\nprint(\"Hello, \" + name + \"!\")\n\n# Taking numerical input\nage = int(input(\"Enter your age: \"))\nprint(\"You are\", age, \"years old.\")\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\n\n\n\n\n\n\nNote\n\n\n\nThe print() function in Python, defined in the built-in __builtin__ module, is used to display output on the screen, providing a simple way to output text and variable values to the console.\n\n\nCombining Variables and Input/Output\nus can combine variables and input/output functions to create interactive programs.\n\nExample: Find sum of two numbers\n\n\nTemplateDIY\n\n\n# Program to calculate the sum of two numbers\nnum1 = float(input(\"Enter first number: \"))\nnum2 = float(input(\"Enter second number: \"))\n\n# Calculate sum\nsum = num1 + num2\n\n# Display the result\nprint(\"The sum of\", num1, \"and\", num2, \"is\", sum)\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\n\n\nPython Programming Style\n\nIndentation\nPython uses indentation to define the blocks of code. Proper indentation is crucial as it affects the program’s flow. Use 4 spaces per indentation level. For example consider the conditional statement below to find the larger among two numbers \\(a\\) and \\(b\\). Here to encapsulate the if part, we just use an indendation of 4 white spaces, similar for the else part.\nif a &gt; b:\n    print(\"a is greater than b\")\nelse:\n    print(\"b is greater than or equal to a\")\n\n\nComments\nUse comments to explain user code. Comments begin with the # symbol and extend to the end of the line. Write comments that are clear and concise. See the example:\n# This is a comment\na = 10  # This is an inline comment\nHere the first line is just a comment. But in the second line, the comment is used to explain what that line of code do!\n\n\nVariable Naming\nUse meaningful variable names to make the code more understandable. Variable names should be in lowercase with words separated by underscores. Two examples are given below.\nstudent_name = \"John\"\ntotal_score = 95\n\n\nConsistent Style\nFollow the PEP 8 style guide for Python code to maintain consistency and readability. Use blank lines to separate different sections of usr code. See the following example of function definition:\n\ndef calculate_sum(x, y):\n    return x + y\n\nresult = calculate_sum(5, 3)\nprint(result)"
  },
  {
    "objectID": "Instructional_design/Instru_design.html#basic-datatypes-in-python",
    "href": "Instructional_design/Instru_design.html#basic-datatypes-in-python",
    "title": "Instructional Design for Python Programming",
    "section": "Basic Datatypes in Python",
    "text": "Basic Datatypes in Python\nIn Python, a datatype is a classification that specifies which type of value a variable can hold. Understanding datatypes is essential as it helps in performing appropriate operations on variables. Python supports various built-in datatypes, which can be categorized into several groups.\n\nNumeric Types\nNumeric types represent data that consists of numbers. Python has three distinct numeric types:\n\nIntegers (int):\n\nWhole numbers, positive or negative, without decimals.\nExample: a = 10, b = -5.\n\nFloating Point Numbers (float):\n\nNumbers that contain a decimal point.\nExample: pi = 3.14, temperature = -7.5.\n\nComplex Numbers (complex):\n\nNumbers with a real and an imaginary part.\nExample: z = 3 + 4j.\n\n\n# Examples of numeric types\na = 10         # Integer\npi = 3.14      # Float\nz = 3 + 4j     # Complex\n\n\n\n\n\n\nHow to find datatype of a variable?\n\n\n\nTo get the type of a variable in Python, you can use the built-in type() function.\nThe basic syntax looks like this:\ntype(variable_name)\nWe can try this function in the above example as follows.\n\nTemplateDIY\n\n\n# Examples of numeric types\na = 10         # Integer\npi = 3.14      # Float\nz = 3 + 4j     # Complex\n# extract datatype\n\ntype(a)\ntype(pi)\ntype(z)\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\n\nSequence Types\nSequence types are used to store multiple items in a single variable. Python has several sequence types, including:\n\nString Type\nStrings in Python are sequences of characters enclosed in quotes. They are used to handle and manipulate textual data.\nCharacteristics of Strings\n\nOrdered: Characters in a string have a defined order.\nImmutable: Strings cannot be modified after they are created.\nHeterogeneous: Strings can include any combination of letters, numbers, and symbols.\n\nCreating Strings\nStrings can be created using single quotes, double quotes, or triple quotes for multiline strings.\n\nExample:\n\n# Creating strings with different types of quotes\nsingle_quoted = 'Hello, World!'\ndouble_quoted = \"Hello, World!\"\nmultiline_string = \"\"\"This is a\nmultiline string\"\"\"\n\nPython CodeOutput\n\n\n\n\n\n\n\n\n\nAccessing String Characters\nCharacters in a string are accessed using their index, with the first character having an index of 0. Negative indexing can be used to access characters from the end.\n\nExample:\n\n# Accessing characters in a string\nfirst_char = single_quoted[0]  # Output: 'H'\nlast_char = single_quoted[-1]  # Output: '!'\n\nPython CodeOutput\n\n\n\n\n\n\n\n\n\nCommon String Methods\nPython provides various methods for string manipulation:\n\nupper(): Converts all characters to uppercase.\nlower(): Converts all characters to lowercase.\nstrip(): Removes leading and trailing whitespace.\nreplace(old, new): Replaces occurrences of a substring with another substring.\nsplit(separator): Splits the string into a list based on a separator.\n\n\nExample:\n\n# Using string methods\ntext = \"   hello, world!   \"\nuppercase_text = text.upper()       # Result: \"   HELLO, WORLD!   \"\nstripped_text = text.strip()        # Result: \"hello, world!\"\nreplaced_text = text.replace(\"world\", \"Python\")  # Result: \"   hello, Python!   \"\nwords = text.split(\",\")             # Result: ['hello', ' world!   ']\n\nPython CodeOutput\n\n\n\n\n\n\n\n\n\n\n\nList Type\nLists are one of the most versatile and commonly used sequence types in Python. They allow for the storage and manipulation of ordered collections of items.\n\nCharacteristics of Lists\n\n\nOrdered: The items in a list have a defined order, which will not change unless explicitly modified.\nMutable: The content of a list can be changed after its creation (i.e., items can be added, removed, or modified).\nDynamic: Lists can grow or shrink in size as items are added or removed.\nHeterogeneous: Items in a list can be of different data types (e.g., integers, strings, floats).\n\nCreating Lists\nLists are created by placing comma-separated values inside square brackets.\n\nExample:\n\n# Creating a list of fruits\nfruits = [\"apple\", \"banana\", \"cherry\"]\n\n# Creating a mixed list\nmixed_list = [1, \"Hello\", 3.14]\n\nPython CodeOutput\n\n\n\n\n\n\n\n\n\nAccessing List Items\nList items are accessed using their index, with the first item having an index of 0.\n\nExample:\n\n\n# Accessing the first item\nfirst_fruit = fruits[0]  # Output: \"apple\"\n\n# Accessing the last item\nlast_fruit = fruits[-1]  # Output: \"cherry\"\n\nPython CodeOutput\n\n\n\n\n\n\n\n\n\nModifying Lists\nLists can be modified by changing the value of specific items, adding new items, or removing existing items.\n\nExample:\n\n# Changing the value of an item\nfruits[1] = \"blueberry\"  # fruits is now [\"apple\", \"blueberry\", \"cherry\"]\n\n# Adding a new item\nfruits.append(\"orange\")  # fruits is now [\"apple\", \"blueberry\", \"cherry\", \"orange\"]\n\n# Removing an item\nfruits.remove(\"blueberry\")  # fruits is now [\"apple\", \"cherry\", \"orange\"]\n\nPython CodeOutput\n\n\n\n\n\n\n\n\n\nList Methods\nPython provides several built-in methods to work with lists:\n\nappend(item): Adds an item to the end of the list.\ninsert(index, item): Inserts an item at a specified index.\nremove(item): Removes the first occurrence of an item.\npop(index): Removes and returns the item at the specified index.\nsort(): Sorts the list in ascending order.\nreverse(): Reverses the order of the list.\n\n\nExample:\n\n# Using list methods\nnumbers = [5, 2, 9, 1]\n\nnumbers.append(4)     # numbers is now [5, 2, 9, 1, 4]\nnumbers.sort()        # numbers is now [1, 2, 4, 5, 9]\nnumbers.reverse()     # numbers is now [9, 5, 4, 2, 1]\nfirst_number = numbers.pop(0)  # first_number is 9, numbers is now [5, 4, 2, 1]\n\nPython CodeOutput\n\n\n\n\n\n\n\n\n\n\n\nTuple Type\nTuples are a built-in sequence type in Python that is used to store an ordered collection of items. Unlike lists, tuples are immutable, which means their contents cannot be changed after creation.\nCharacteristics of Tuples\n\nOrdered: Tuples maintain the order of items, which is consistent throughout their lifetime.\nImmutable: Once a tuple is created, its contents cannot be modified. This includes adding, removing, or changing items.\nFixed Size: The size of a tuple is fixed; it cannot grow or shrink after creation.\nHeterogeneous: Tuples can contain items of different data types, such as integers, strings, and floats.\n\nCreating Tuples\nTuples are created by placing comma-separated values inside parentheses. Single-element tuples require a trailing comma.\n\nExample:\n\n# Creating a tuple with multiple items\ncoordinates = (10, 20, 30)\n\n# Creating a single-element tuple\nsingle_element_tuple = (5,)\n\n# Creating a tuple with mixed data types\nmixed_tuple = (1, \"Hello\", 3.14)\n\nPython CodeOutput\n\n\n\n\n\n\n\n\n\nAccessing Tuple Items\nTuple items are accessed using their index, with the first item having an index of 0. Negative indexing can be used to access items from the end.\n\nExample:\n\n# Accessing the first item\nx = coordinates[0]  # Output: 10\n\n# Accessing the last item\nz = coordinates[-1]  # Output: 30\n\nPython CodeOutput\n\n\n\n\n\n\n\n\n\nModifying Tuples\nSince tuples are immutable, their contents cannot be modified. However, us can create new tuples by combining or slicing existing ones.\n\nExample:\n\n# Combining tuples\nnew_coordinates = coordinates + (40, 50)  # Result: (10, 20, 30, 40, 50)\n\n# Slicing tuples\nsub_tuple = coordinates[1:3]  # Result: (20, 30)\n\nPython CodeOutput\n\n\n\n\n\n\n\n\n\nTuple Methods\nTuples have a limited set of built-in methods compared to lists:\n\ncount(item): Returns the number of occurrences of the specified item.\nindex(item): Returns the index of the first occurrence of the specified item.\n\n\nExample:\n\n# Using tuple methods\nnumbers = (1, 2, 3, 1, 2, 1)\n\n# Counting occurrences of an item\ncount_1 = numbers.count(1)  # Result: 3\n\n# Finding the index of an item\nindex_2 = numbers.index(2)  # Result: 1\n\nPython CodeOutput\n\n\n\n\n\n\n\n\n\n\n\n\nMapping Types\nMapping types in Python are used to store data in key-value pairs. Unlike sequences, mappings do not maintain an order and are designed for quick lookups of data.\n\nDictionary (dict)\nThe primary mapping type in Python is the dict. Dictionaries store data as key-value pairs, where each key must be unique, and keys are used to access their corresponding values.\nCharacteristics of Dictionaries\n\nUnordered: The order of items is not guaranteed and may vary.\nMutable: us can add, remove, and change items after creation.\nKeys: Must be unique and immutable (e.g., strings, numbers, tuples).\nValues: Can be of any data type and can be duplicated.\n\nCreating Dictionaries\nDictionaries are created using curly braces {} with key-value pairs separated by colons :.\n\nExample:\n\n# Creating a dictionary\nstudent = {\n    \"name\": \"Alice\",\n    \"age\": 21,\n    \"major\": \"Computer Science\"\n}\n\nPython CodeOutput\n\n\n\n\n\n\n\n\n\nAccessing and Modifying Dictionary Items\nItems in a dictionary are accessed using their keys. us can also modify, add, or remove items.\n\nExample:\n\n# Accessing a value\nname = student[\"name\"]  # Output: \"Alice\"\n\n# Modifying a value\nstudent[\"age\"] = 22  # Updates the age to 22\n\n# Adding a new key-value pair\nstudent[\"graduation_year\"] = 2024\n\n# Removing a key-value pair\ndel student[\"major\"]\n\nPython CodeOutput\n\n\n\n\n\n\n\n\n\nDictionary Methods\nPython provides several built-in methods to work with dictionaries:\n\nkeys(): Returns a view object of all keys.\nvalues(): Returns a view object of all values.\nitems(): Returns a view object of all key-value pairs.\nget(key, default): Returns the value for the specified key, or a default value if the key is not found.\npop(key, default): Removes and returns the value for the specified key, or a default value if the key is not found.\n\n\nExample:\n\n# Using dictionary methods\nkeys = student.keys()        # Result: dict_keys(['name', 'age', 'graduation_year'])\nvalues = student.values()    # Result: dict_values(['Alice', 22, 2024])\nitems = student.items()      # Result: dict_items([('name', 'Alice'), ('age', 22), ('graduation_year', 2024)])\nname = student.get(\"name\")  # Result: \"Alice\"\nage = student.pop(\"age\")    # Result: 22\n\nPython CodeOutput\n\n\n\n\n\n\n\n\n\n\n\n\nSet Types\nSets are a built-in data type in Python used to store unique, unordered collections of items. They are particularly useful for operations involving membership tests, set operations, and removing duplicates.\nCharacteristics of Sets\n\nUnordered : The items in a set do not have a specific order and may change.\nMutable : us can add or remove items from a set after its creation.\nUnique : Sets do not allow duplicate items; all items must be unique.\nUnindexed : Sets do not support indexing or slicing.\n\nCreating Sets\nSets are created using curly braces {} with comma-separated values, or using the set() function.\n\nExample:\n\n# Creating a set using curly braces\nfruits = {\"apple\", \"banana\", \"cherry\"}\n\n# Creating a set using the set() function\nnumbers = set([1, 2, 3, 4, 5])\n\nPython CodeOutput\n\n\n\n\n\n\n\n\n\nAccessing and Modifying Set Items\nWhile us cannot access individual items by index, us can check for membership and perform operations like adding or removing items.\n\nExample:\n\n# Checking membership\nhas_apple = \"apple\" in fruits  # Output: True\n\n# Adding an item\nfruits.add(\"orange\")\n\n# Removing an item\nfruits.remove(\"banana\")  # Raises KeyError if item is not present\n\nPython CodeOutput\n\n\n\n\n\n\n\n\n\nSet Operations Sets support various mathematical set operations, such as union, intersection, and difference.\n\nExample:\n\n# Union of two sets\nset1 = {1, 2, 3}\nset2 = {3, 4, 5}\nunion = set1 | set2  # Result: {1, 2, 3, 4, 5}\n\n# Intersection of two sets\nintersection = set1 & set2  # Result: {3}\n\n# Difference between two sets\ndifference = set1 - set2  # Result: {1, 2}\n\n# Symmetric difference (items in either set, but not in both)\nsymmetric_difference = set1 ^ set2  # Result: {1, 2, 4, 5}\n\nPython CodeOutput\n\n\n\n\n\n\n\n\n\nSet Methods\nPython provides several built-in methods for set operations:\n\nadd(item): Adds an item to the set.\nremove(item): Removes an item from the set; raises KeyError if item is not present.\ndiscard(item): Removes an item from the set if present; does not raise an error if item is not found.\npop(): Removes and returns an arbitrary item from the set.\nclear(): Removes all items from the set.\n\n\nExample:\n\n# Using set methods\nset1 = {1, 2, 3}\n\nset1.add(4)        # set1 is now {1, 2, 3, 4}\nset1.remove(2)     # set1 is now {1, 3, 4}\nset1.discard(5)    # No error, set1 remains {1, 3, 4}\nitem = set1.pop()  # Removes and returns an arbitrary item, e.g., 1\nset1.clear()      # set1 is now an empty set {}\n\nPython CodeOutput\n\n\n\n\n\n\n\n\n\n\n## Frozen Sets\nFrozen sets are a built-in data type in Python that are similar to sets but are immutable. Once created, a frozen set cannot be modified, making it suitable for use as a key in dictionaries or as elements of other sets.\nCharacteristics of Frozen Sets\n\nUnordered : The items in a frozen set do not have a specific order and may change.\nImmutable : Unlike regular sets, frozen sets cannot be altered after creation. No items can be added or removed.\nUnique : Like sets, frozen sets do not allow duplicate items; all items must be unique.\nUnindexed : Frozen sets do not support indexing or slicing.\n\nCreating Frozen Sets\nFrozen sets are created using the frozenset() function, which takes an iterable as an argument.\n\nExample:\n\n# Creating a frozen set\nnumbers = frozenset([1, 2, 3, 4, 5])\n\n# Creating a frozen set from a set\nfruits = frozenset({\"apple\", \"banana\", \"cherry\"})\n\nPython CodeOutput\n\n\n\n\n\n\n\n\n\nAccessing and Modifying Frozen Set Items\nFrozen sets do not support modification operations such as adding or removing items. However, us can perform membership tests and other set operations.\n\nExample:\n\n# Checking membership\nhas_apple = \"apple\" in fruits  # Output: True\n\n# Since frozenset is immutable, us cannot use add() or remove() methods\n\nPython CodeOutput\n\n\n\n\n\n\n\n\n\nSet Operations with Frozen Sets\nFrozen sets support various mathematical set operations similar to regular sets, such as union, intersection, and difference. These operations return new frozen sets and do not modify the original ones.\n\nExample:\n\n# Union of two frozen sets\nset1 = frozenset([1, 2, 3])\nset2 = frozenset([3, 4, 5])\nunion = set1 | set2  # Result: frozenset({1, 2, 3, 4, 5})\n\n# Intersection of two frozen sets\nintersection = set1 & set2  # Result: frozenset({3})\n\n# Difference between two frozen sets\ndifference = set1 - set2  # Result: frozenset({1, 2})\n\n# Symmetric difference (items in either set, but not in both)\nsymmetric_difference = set1 ^ set2  # Result: frozenset({1, 2, 4, 5})\n\nPython CodeOutput\n\n\n\n\n\n\n\n\n\nFrozen Set Methods\nFrozen sets have a subset of the methods available to regular sets. The available methods include:\n\ncopy() : Returns a shallow copy of the frozen set.\ndifference(other) : Returns a new frozen set with elements in the original frozen set but not in other.\nintersection(other) : Returns a new frozen set with elements common to both frozen sets.\nunion(other) : Returns a new frozen set with elements from both frozen sets.\nsymmetric_difference(other) : Returns a new frozen set with elements in either frozen set but not in both.\n\n\nExample:\n\n# Using frozen set methods\nset1 = frozenset([1, 2, 3])\nset2 = frozenset([3, 4, 5])\n\n# Getting the difference\ndifference = set1.difference(set2)  # Result: frozenset({1, 2})\n\n# Getting the intersection\nintersection = set1.intersection(set2)  # Result: frozenset({3})\n\n# Getting the union\nunion = set1.union(set2)  # Result: frozenset({1, 2, 3, 4, 5})\n\n# Getting the symmetric difference\nsymmetric_difference = set1.symmetric_difference(set2)  # Result: frozenset({1, 2, 4, 5})\n\nPython CodeOutput\n\n\n\n\n\n\n\n\n\n\n\n\nControl Structures in Python\nControl structures in Python allow us to control the flow of execution in our programs. They help manage decision-making, looping, and the execution of code blocks based on certain conditions. Python provides several key control structures: if statements, for loops, while loops, and control flow statements like break, continue, and pass.\n\nConditional Statements\nConditional statements are used to execute code based on certain conditions. The primary conditional statement in Python is the if statement, which can be combined with elif and else to handle multiple conditions.\n\nSyntax:\n\nif condition:\n    # Code block to execute if condition is True\nelif another_condition:\n    # Code block to execute if another_condition is True\nelse:\n    # Code block to execute if none of the above conditions are True\n\nExample: Program to classify a person based on his/her age.\n\nage = 20\n\nif age &lt; 18:\n    print(\"us are a minor.\")\nelif age &lt; 65:\n    print(\"us are an adult.\")\nelse:\n    print(\"us are a senior citizen.\")\n\nPython CodeOutput\n\n\n\n\n\n\n\n\n\n\n\nLooping Statements\nLooping statements are used to repeat a block of code multiple times. Python supports for loops and while loops.\n\nFor Loop\nThe for loop iterates over a sequence (like a list, tuple, or string) and executes a block of code for each item in the sequence.\n\nSyntax:\n\nfor item in sequence:\n    # Code block to execute for each item\n\nExample: Program to print names of fruits saved in a list.\n\n# Iterating over a list\nfruits = [\"apple\", \"banana\", \"cherry\"]\nfor fruit in fruits:\n    print(fruit)\n\nPython CodeOutput\n\n\n\n\n\n\n\n\n\n\n\nWhile Loop\nThe while loop repeatedly executes a block of code as long as a specified condition is True.\n\nSyntax:\n\nwhile condition:\n    # Code block to execute while condition is True\n\nExample: Print all counting numbers less than 5.\n\n# Counting from 0 to 4\ncount = 0\nwhile count &lt; 5:\n    print(count)\n    count += 1\n\nPython CodeOutput\n\n\n\n\n\n\n\n\n\n\n\n\nControl Flow Statements\nControl flow statements alter the flow of execution within loops and conditionals.\n\nBreak Statement\nThe break statement exits the current loop, regardless of the loop’s condition.\n\nExample: Program to exit from the printing of whole numbers less than 10, while trigger 5.\n\nfor i in range(10):\n    if i == 5:\n        break\n    print(i)\n# Output: 0 1 2 3 4\n\nPython CodeOutput\n\n\n\n\n\n\n\n\n\n\n\nContinue Statement\nThe continue statement skips the rest of the code inside the current loop iteration and proceeds to the next iteration.\n\nExample: Program to print all the whole numbers in the range 5 except 2.\n\nfor i in range(5):\n    if i == 2:\n        continue\n    print(i) \n# Output: 0 1 3 4\n\nPython CodeOutput\n\n\n\n\n\n\n\n\n\n\n\nPass Statement\nThe pass statement is a placeholder that does nothing and is used when a statement is syntactically required but no action is needed.\n\nExample: Program to print all the whole numbers in the range 5 except 3.\n\nfor i in range(5):\n    if i == 3:\n        pass  # Placeholder for future code\n    else:\n        print(i)\n# Output: 0 1 2 4\n\nPython CodeOutput\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nCautions When Using Control Flow Structures\n\n\n\n\n\nControl flow structures are essential in Python programming for directing the flow of execution. However, improper use of these structures can lead to errors, inefficiencies, and unintended behaviors. Here are some cautions to keep in mind:\nInfinite Loops\n\nIssue: A while loop with a condition that never becomes False can lead to an infinite loop, which will cause the program to hang or become unresponsive.\nCaution: Always ensure that the condition in a while loop will eventually become False, and include logic within the loop to modify the condition.\n\nExample:\n# Infinite loop example\ncount = 0\nwhile count &lt; 5:\n    print(count)\n    # Missing count increment, causing an infinite loop\n\n\n\n\n\n\n\nFunctions in Python Programming\nFunctions are a fundamental concept in Python programming that enable code reuse, modularity, and organization. They allow us to encapsulate a block of code that performs a specific task, which can be executed whenever needed. Functions are essential for writing clean, maintainable, and scalable code, making them a cornerstone of effective programming practices.\nWhat is a Function?\nA function is a named block of code designed to perform a specific task. Functions can take inputs, called parameters or arguments, and can return outputs, which are the results of the computation or task performed by the function. By defining functions, we can write code once and reuse it multiple times, which enhances both efficiency and readability.\nDefining a Function\nIn Python, functions are defined using the def keyword, followed by the function name, parentheses containing any parameters, and a colon. The function body, which contains the code to be executed, is indented below the function definition.\n\nSyntax:\n\ndef function_name(parameters):\n    # Code block\n    return result\n\nExample:\n\ndef greet(name):\n    \"\"\"\n    Returns a greeting message for the given name.\n    \"\"\"\n    return f\"Hello, {name}!\"\n\nPython CodeOutput\n\n\n\n\n\n\n\n\n\n\nRelevance of functions in Programming\n\nCode Reusability : Functions allow us to define a piece of code once and reuse it in multiple places. This reduces redundancy and helps maintain consistency across our codebase.\nModularity : Functions break down complex problems into smaller, manageable pieces. Each function can be focused on a specific task, making it easier to understand and maintain the code.\nAbstraction : Functions enable us to abstract away the implementation details. We can use a function without needing to know its internal workings, which simplifies the code we write and enhances readability.\nTesting and Debugging : Functions allow us to test individual components of our code separately. This isolation helps in identifying and fixing bugs more efficiently.\nLibrary Creation : Functions are the building blocks of libraries and modules. By organizing related functions into libraries, we can create reusable components that can be shared and utilized across different projects.\n\n\nExample: Creating a Simple Library\n\nStage 1: Define Functions in a Module\n# my_library.py\n\ndef add(a, b):\n    \"\"\"\n    Returns the sum of two numbers.\n    \"\"\"\n    return a + b\n\ndef multiply(a, b):\n    \"\"\"\n    Returns the product of two numbers.\n    \"\"\"\n    return a * b\nStage 2: Use the Library in Another Program\n# main.py\n\nimport my_library\n\nresult_sum = my_library.add(5, 3)\nresult_product = my_library.multiply(5, 3)\n\nprint(f\"Sum: {result_sum}\")\nprint(f\"Product: {result_product}\")"
  },
  {
    "objectID": "Instructional_design/Instru_design.html#control-structures-in-python",
    "href": "Instructional_design/Instru_design.html#control-structures-in-python",
    "title": "Instructional Design for Python Programming",
    "section": "Control Structures in Python",
    "text": "Control Structures in Python\nControl structures in Python allow us to control the flow of execution in our programs. They help manage decision-making, looping, and the execution of code blocks based on certain conditions. Python provides several key control structures: if statements, for loops, while loops, and control flow statements like break, continue, and pass.\n\nConditional Statements\nConditional statements are used to execute code based on certain conditions. The primary conditional statement in Python is the if statement, which can be combined with elif and else to handle multiple conditions.\n\nSyntax:\n\nif condition:\n    # Code block to execute if condition is True\nelif another_condition:\n    # Code block to execute if another_condition is True\nelse:\n    # Code block to execute if none of the above conditions are True\n\nExample: Program to classify a person based on his/her age.\n\nage = 20\n\nif age &lt; 18:\n    print(\"us are a minor.\")\nelif age &lt; 65:\n    print(\"us are an adult.\")\nelse:\n    print(\"us are a senior citizen.\")\n\nPython CodeOutput\n\n\n\n\n\n\n\n\n\n\n\nLooping Statements\nLooping statements are used to repeat a block of code multiple times. Python supports for loops and while loops.\n\nFor Loop\nThe for loop iterates over a sequence (like a list, tuple, or string) and executes a block of code for each item in the sequence.\n\nSyntax:\n\nfor item in sequence:\n    # Code block to execute for each item\n\nExample: Program to print names of fruits saved in a list.\n\n# Iterating over a list\nfruits = [\"apple\", \"banana\", \"cherry\"]\nfor fruit in fruits:\n    print(fruit)\n\nPython CodeOutput\n\n\n\n\n\n\n\n\n\n\n\nWhile Loop\nThe while loop repeatedly executes a block of code as long as a specified condition is True.\n\nSyntax:\n\nwhile condition:\n    # Code block to execute while condition is True\n\nExample: Print all counting numbers less than 5.\n\n# Counting from 0 to 4\ncount = 0\nwhile count &lt; 5:\n    print(count)\n    count += 1\n\nPython CodeOutput\n\n\n\n\n\n\n\n\n\n\n\n\nControl Flow Statements\nControl flow statements alter the flow of execution within loops and conditionals.\n\nBreak Statement\nThe break statement exits the current loop, regardless of the loop’s condition.\n\nExample: Program to exit from the printing of whole numbers less than 10, while trigger 5.\n\nfor i in range(10):\n    if i == 5:\n        break\n    print(i)\n# Output: 0 1 2 3 4\n\nPython CodeOutput\n\n\n\n\n\n\n\n\n\n\n\nContinue Statement\nThe continue statement skips the rest of the code inside the current loop iteration and proceeds to the next iteration.\n\nExample: Program to print all the whole numbers in the range 5 except 2.\n\nfor i in range(5):\n    if i == 2:\n        continue\n    print(i) \n# Output: 0 1 3 4\n\nPython CodeOutput\n\n\n\n\n\n\n\n\n\n\n\nPass Statement\nThe pass statement is a placeholder that does nothing and is used when a statement is syntactically required but no action is needed.\n\nExample: Program to print all the whole numbers in the range 5 except 3.\n\nfor i in range(5):\n    if i == 3:\n        pass  # Placeholder for future code\n    else:\n        print(i)\n# Output: 0 1 2 4\n\nPython CodeOutput\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nCautions When Using Control Flow Structures\n\n\n\n\n\nControl flow structures are essential in Python programming for directing the flow of execution. However, improper use of these structures can lead to errors, inefficiencies, and unintended behaviors. Here are some cautions to keep in mind:\nInfinite Loops\n\nIssue: A while loop with a condition that never becomes False can lead to an infinite loop, which will cause the program to hang or become unresponsive.\nCaution: Always ensure that the condition in a while loop will eventually become False, and include logic within the loop to modify the condition.\n\nExample:\n# Infinite loop example\ncount = 0\nwhile count &lt; 5:\n    print(count)\n    # Missing count increment, causing an infinite loop"
  },
  {
    "objectID": "Instructional_design/Instru_design.html#functions-in-python-programming",
    "href": "Instructional_design/Instru_design.html#functions-in-python-programming",
    "title": "Instructional Design for Python Programming",
    "section": "Functions in Python Programming",
    "text": "Functions in Python Programming\nFunctions are a fundamental concept in Python programming that enable code reuse, modularity, and organization. They allow us to encapsulate a block of code that performs a specific task, which can be executed whenever needed. Functions are essential for writing clean, maintainable, and scalable code, making them a cornerstone of effective programming practices.\nWhat is a Function?\nA function is a named block of code designed to perform a specific task. Functions can take inputs, called parameters or arguments, and can return outputs, which are the results of the computation or task performed by the function. By defining functions, we can write code once and reuse it multiple times, which enhances both efficiency and readability.\nDefining a Function\nIn Python, functions are defined using the def keyword, followed by the function name, parentheses containing any parameters, and a colon. The function body, which contains the code to be executed, is indented below the function definition.\n\nSyntax:\n\ndef function_name(parameters):\n    # Code block\n    return result\n\nExample:\n\ndef greet(name):\n    \"\"\"\n    Returns a greeting message for the given name.\n    \"\"\"\n    return f\"Hello, {name}!\"\n\nPython CodeOutput\n\n\n\n\n\n\n\n\n\n\nRelevance of functions in Programming\n\nCode Reusability : Functions allow us to define a piece of code once and reuse it in multiple places. This reduces redundancy and helps maintain consistency across our codebase.\nModularity : Functions break down complex problems into smaller, manageable pieces. Each function can be focused on a specific task, making it easier to understand and maintain the code.\nAbstraction : Functions enable us to abstract away the implementation details. We can use a function without needing to know its internal workings, which simplifies the code we write and enhances readability.\nTesting and Debugging : Functions allow us to test individual components of our code separately. This isolation helps in identifying and fixing bugs more efficiently.\nLibrary Creation : Functions are the building blocks of libraries and modules. By organizing related functions into libraries, we can create reusable components that can be shared and utilized across different projects.\n\n\nExample: Creating a Simple Library\n\nStage 1: Define Functions in a Module\n# my_library.py\n\ndef add(a, b):\n    \"\"\"\n    Returns the sum of two numbers.\n    \"\"\"\n    return a + b\n\ndef multiply(a, b):\n    \"\"\"\n    Returns the product of two numbers.\n    \"\"\"\n    return a * b\nStage 2: Use the Library in Another Program\n# main.py\n\nimport my_library\n\nresult_sum = my_library.add(5, 3)\nresult_product = my_library.multiply(5, 3)\n\nprint(f\"Sum: {result_sum}\")\nprint(f\"Product: {result_product}\")"
  },
  {
    "objectID": "introduction/slides-quarto.html#getting-started",
    "href": "introduction/slides-quarto.html#getting-started",
    "title": "Introduction to Literate Programming with Quarto",
    "section": "Getting started",
    "text": "Getting started\n\nGet started documentation: quarto.org/docs/get-started/\nOpen-source repository in GitHub: Quarto-cli\nCreate a project with quarto create project\n\nType: default, website, blog, manuscript, book, confluence\n\nBuild project with quarto render\nPreview with quarto preview (it autobuilds and updates when changes in the source files are detected)."
  },
  {
    "objectID": "introduction/slides-quarto.html#integrated-development-environments",
    "href": "introduction/slides-quarto.html#integrated-development-environments",
    "title": "Introduction to Literate Programming with Quarto",
    "section": "Integrated Development Environments",
    "text": "Integrated Development Environments\nQuarto is integrated in multiple IDEs"
  },
  {
    "objectID": "introduction/index.html",
    "href": "introduction/index.html",
    "title": "Introduction to Literate Programming with Quarto",
    "section": "",
    "text": "Introduction\nWelcome to Day 1 of our workshop! Today, we embark on an exploration of literate programming through the powerful open-source tool, Quarto. Literate programming is a methodology that integrates code and documentation, allowing for clearer, more maintainable, and more insightful technical writing. By the end of today, you’ll gain hands-on experience with Quarto, learning how to craft high-quality technical documents, build interactive web pages, and create engaging blogs. Our sessions are designed to provide both theoretical knowledge and practical skills, equipping you with the tools to effectively communicate your code and ideas. Let’s dive into the world of literate programming and see how Quarto can transform your documentation practices.",
    "crumbs": [
      "Home",
      "Introduction to Quarto"
    ]
  },
  {
    "objectID": "introduction/index.html#unleashing-literate-programming-with-quarto",
    "href": "introduction/index.html#unleashing-literate-programming-with-quarto",
    "title": "Introduction to Literate Programming with Quarto",
    "section": "",
    "text": "Introduction\nWelcome to Day 1 of our workshop! Today, we embark on an exploration of literate programming through the powerful open-source tool, Quarto. Literate programming is a methodology that integrates code and documentation, allowing for clearer, more maintainable, and more insightful technical writing. By the end of today, you’ll gain hands-on experience with Quarto, learning how to craft high-quality technical documents, build interactive web pages, and create engaging blogs. Our sessions are designed to provide both theoretical knowledge and practical skills, equipping you with the tools to effectively communicate your code and ideas. Let’s dive into the world of literate programming and see how Quarto can transform your documentation practices.",
    "crumbs": [
      "Home",
      "Introduction to Quarto"
    ]
  },
  {
    "objectID": "introduction/index.html#getting-started",
    "href": "introduction/index.html#getting-started",
    "title": "Introduction to Literate Programming with Quarto",
    "section": "Getting started",
    "text": "Getting started\n\nGet started documentation: quarto.org/docs/get-started/\nOpen-source repository in GitHub: Quarto-cli\nCreate a project with quarto create project\n\nType: default, website, blog, manuscript, book, confluence\n\nBuild project with quarto render\nPreview with quarto preview (it autobuilds and updates when changes in the source files are detected).",
    "crumbs": [
      "Home",
      "Introduction to Quarto"
    ]
  },
  {
    "objectID": "introduction/index.html#integrated-development-environments",
    "href": "introduction/index.html#integrated-development-environments",
    "title": "Introduction to Literate Programming with Quarto",
    "section": "Integrated Development Environments",
    "text": "Integrated Development Environments\nThe separation of the source code and the publishable outputs is something that all Integrated Development Environments (IDEs) provide. These are tools for writing computer programs that commonly require a compilation phase which is usually integrated in the same tool. The idea of authoring tools that can create generic input artefacts that are later combined by a formatting tool is very similar to the common process followed in programming compiled programming languages. This has facilitate the adoption of IDEs as authoring tools. Microsoft Visual Studio and Posit Workbench (formerly RStudio) have tools to work with the Quarto environment. Both of them provide options for collaborative and contemporaneous editing.",
    "crumbs": [
      "Home",
      "Introduction to Quarto"
    ]
  },
  {
    "objectID": "introduction/index.html#key-points-about-quarto",
    "href": "introduction/index.html#key-points-about-quarto",
    "title": "Introduction to Literate Programming with Quarto",
    "section": "Key points about Quarto",
    "text": "Key points about Quarto\n\nQuarto is a formatting tool\nuses pandoc to convert the input artefacts to various outputs.\nsupports plain text markdown, Jupyter notebooks and an augmented markdown,\nsupports dynamic content with Python, R, Julia and Observable programming languages.\nis integrated in multiple IDEs: Visual Studio, Posit Connect (former RMarkdown), Atlassian Confluence, …",
    "crumbs": [
      "Home",
      "Introduction to Quarto"
    ]
  }
]